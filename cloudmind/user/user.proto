syntax = "proto3";
package user;
option go_package = "user";

import "basic/pagination.proto";

enum Sex {
  UnKnown = 0; // 未知
  Man = 1; // 男
  Women = 2; // 女
}

message Point {
  int32 x = 1;
  int32 y = 2;
}
message Token {
  string accessToken = 1;
  string refreshToken = 2;
  string chatToken = 3;
}

message UserDetail {
  string userId = 1;
  string email = 2;
  string name = 3;
  int32  sex = 4;
  string fullName = 5;
  string idCard = 6;
  int64 createdAt = 7;
  int64 updatedAt = 8;
  optional int64 money = 9;
  optional int64 flow = 10;
  optional int64 memory = 11;
  string description = 12;
  string url = 13;
  string passWord = 14;
}

message User {
  string userId = 1;
  string name = 2;
  string url = 3;
}

message SendEmailReq {
  string email = 1;
  string subject = 2;
}

message SendEmailResp {
  string error = 2;
}

message UpdateUserReq{
  UserDetail user = 1;
  string Code = 2; // 邮箱验证码 修改邮箱号需要填邮箱验证码
}
message UpdateUserResp{
  string error = 1;
}

message GetUserReq{
   string userId = 1;
}
message GetUserResp{
  User user = 1;
  string error = 2;
}

message CreateCaptchaReq{
}

message CreateCaptchaResp{
  string originalImageBase64 = 1;
  string jigsawImageBase64 = 2;
  string key = 3;
  string error = 4;
}

message GetCaptchaReq{
   string key = 1;
}

message GetCaptchaResp{
  Point point = 1;
  string error = 2;
}

message SearchUserReq{
  oneof searchOption {
    string name = 1;
    string userId = 2;
  }
  optional basic.PaginationOptions paginationOptions = 3;
}

message SearchUserResp{
  repeated User users = 1;
  int32 total = 2;
  string error = 3;
}

message CreateUserReq{
  UserDetail user = 1;
}

message CreateUserResp{
  string userId = 1;
}

message GetUserDetailReq{
  oneof UserKey {
    string userId = 1;
    string email = 2;
  }
}

message GetUserDetailResp {
  UserDetail user = 1;
  string Error = 2;
}

service UserService {
  rpc UpdateUser(UpdateUserReq) returns(UpdateUserResp);
  rpc GetUser(GetUserReq) returns(GetUserResp);
  rpc GetUserDetail(GetUserDetailReq) returns(GetUserDetailResp);
  rpc GetCaptcha(GetCaptchaReq) returns(GetCaptchaResp);
  rpc CreateCaptcha(CreateCaptchaReq) returns(CreateCaptchaResp);
  rpc SearchUser(SearchUserReq) returns(SearchUserResp);
  rpc CreateUser(CreateUserReq) returns(CreateUserResp);
}
