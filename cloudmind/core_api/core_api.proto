syntax = "proto3";
package cloudmind.core_api;
option go_package = "cloudmind/core_api";
import "http/http.proto";
import "cloudmind/core_api/content.proto";
import "cloudmind/core_api/auth.proto";
import "cloudmind/core_api/relation.proto";
import "cloudmind/core_api/system.proto";
import "cloudmind/core_api/comment.proto";

service content {
  // ------------------ 用户 --------------------
  rpc UpdateUser(UpdateUserReq) returns(UpdateUserResp){
    option (http.post) = "/content/updateUser";
  }
  rpc SearchUser(SearchUserReq) returns(SearchUserResp){
    option (http.get) = "/content/searchUser";
  }
  rpc GetUser(GetUserReq) returns(GetUserResp){
    option (http.get) = "/content/getUser";
  }
  rpc GetUserDetail(GetUserDetailReq) returns(GetUserDetailResp){
    option (http.get) = "/content/getUserDetail";
  }
  rpc AskUploadAvatar(AskUploadAvatarReq) returns(AskUploadAvatarResp) {
    option (http.post) = "/content/askUploadAvatar";
  }
  // ------------------ 用户 --------------------

  // ------------------ 文件 --------------------
  rpc GetPublicFile(GetPublicFilesReq) returns(GetPublicFilesResp){
    option (http.get) = "/content/getPublicFile";
  }
  rpc GetPrivateFile(GetPrivateFileReq) returns(GetPrivateFileResp){
    option (http.get) = "/content/getPrivateFile";
  }
  rpc GetPrivateFiles(GetPrivateFilesReq) returns(GetPrivateFilesResp){
    option (http.get) = "/content/getPrivateFiles";
  }
  rpc GetPublicFiles(GetPublicFilesReq) returns(GetPublicFilesResp){
    option (http.get) = "/content/getPublicFiles";
  }
  rpc GetRecycleBinFiles(GetRecycleBinFilesReq) returns(GetRecycleBinFilesResp){
    option (http.get) = "/content/getRecycleBinFiles";
  }
  rpc GetFileBySharingCode(GetFileBySharingCodeReq) returns(GetFileBySharingCodeResp){
    option (http.get) = "/content/getFileBySharingCode";
  }
  rpc CreateFile(CreateFileReq) returns(CreateFileResp){
    option (http.post) = "/content/createFile";
  }
  rpc UpdateFile(UpdateFileReq) returns(UpdateFileResp){
    option (http.post) = "/content/updateFile";
  }
  rpc MoveFile(MoveFileReq) returns(MoveFileResp){
    option (http.post) = "/content/moveFile";
  }
  rpc SaveFileToPrivateSpace(SaveFileToPrivateSpaceReq) returns(SaveFileToPrivateSpaceResp){
    option (http.post) = "/content/saveFileToPrivateSpace";
  }
  rpc AddFileToPublicSpace(AddFileToPublicSpaceReq) returns(AddFileToPublicSpaceResp){
    option (http.post) = "/content/addFileToPublicSpace";
  }
  rpc CompletelyRemoveFile(CompletelyRemoveFileReq) returns(CompletelyRemoveFileReq){
    option (http.post) = "/content/completelyRemoveFile";
  }
  rpc DeleteFile(DeleteFileReq) returns(DeleteFileResp){
    option (http.post) = "/content/deleteFile";
  }
  rpc RecoverRecycleBinFile(RecoverRecycleBinFileReq) returns(RecoverRecycleBinFileResp){
    option (http.post) = "/content/recoverRecycleBinFile";
  }
  rpc CreateZone(CreateZoneReq) returns(CreateZoneResp){
    option (http.post) = "/content/createZone";
  }
  rpc UpdateZone(UpdateZoneReq) returns(UpdateZoneResp){
    option (http.post) = "/content/updateZone";
  }
  rpc GetZone(GetZoneReq) returns(GetZoneResp){
    option (http.get) = "/content/getZone";
  }
  rpc DeleteZone(DeleteZoneReq) returns(DeleteZoneResp){
    option (http.post) = "/content/deleteZone";
  }
  rpc CreateShareCode(CreateShareCodeReq) returns(CreateShareCodeResp){
    option (http.post) = "/content/createShareCode";
  }
  rpc GetShareList(GetShareListReq) returns(GetShareListResp){
    option (http.get) = "/content/getShareList";
  }
  rpc DeleteShareCode(DeleteShareCodeReq) returns(DeleteShareCodeResp){
    option (http.post) = "/content/deleteShareCode";
  }
  rpc ParsingShareCode(ParsingShareCodeReq) returns(ParsingShareCodeResp){
    option (http.get) = "/content/parsingShareCode";
  }
  rpc AskUploadFile(AskUploadFileReq) returns(AskUploadFileResp){
    option (http.post) = "/content/askUploadFile";
  }
  rpc AskDownloadFile(AskDownloadFileReq) returns(AskDownloadFileResp){
    option (http.post) = "/content/askDownloadFile";
  }
  // ------------------ 文件 --------------------

  // ------------------ 帖子 --------------------
  rpc CreatePost(CreatePostReq) returns(CreatePostResp){
    option (http.post) = "/content/createPost";
  }
  rpc DeletePost(DeletePostReq) returns(DeletePostResp){
    option (http.post) = "/content/deletePost";
  }
  rpc UpdatePost(UpdatePostReq) returns(UpdatePostResp){
    option (http.post) = "/content/updatePost";
  }
  rpc GetPosts(GetPostsReq) returns(GetPostsResp){
    option (http.get) = "/content/getPosts";
  }
  rpc GetPost(GetPostReq) returns(GetPostResp) {
    option (http.get) = "/content/getPost";
  }
  // ------------------ 帖子 --------------------


  // ------------------ 推荐 --------------------
  rpc GetRecommendByUser(GetRecommendByUserReq) returns(GetRecommendByUserResp){
    option (http.get) = "/content/getRecommendByUser";
  }
  rpc GetRecommendByItem(GetRecommendByItemReq) returns(GetRecommendByItemResp){
    option (http.get) = "/content/getRecommendByItem";
  }
  rpc CreateFeedBack(CreateFeedBackReq) returns(CreateFeedBackResp){
    option (http.post) = "/content/createFeedBack";
  }
  rpc GetPopularRecommend(GetPopularRecommendReq) returns(GetPopularRecommendResp){
    option (http.get) = "/content/getPopularRecommend";
  }
  rpc GetLatestRecommend(GetLatestRecommendReq) returns(GetLatestRecommendResp){
    option (http.get) = "/content/getLatestRecommend";
  }

  // ------------------商品-----------------------
  rpc CreateProduct(CreateProductReq) returns(CreateProductResp){
    option (http.post) = "/content/createProduct";
  }
  rpc GetProduct(GetProductReq) returns(GetProductResp){
    option (http.get) = "/content/getProduct";
  }
  rpc GetProducts(GetProductsReq) returns(GetProductsResp){
    option (http.get) = "/content/getProducts";
  }
  rpc UpdateProduct(UpdateProductReq) returns(UpdateProductResp){
    option (http.post) = "/content/updateProduct";
  }
  rpc DeleteProduct(DeleteProductReq) returns(DeleteProductResp){
    option (http.post) = "/content/deleteProduct";
  }
}
service auth {
  rpc Register(RegisterReq) returns (RegisterResp){
    option (http.post) = "/auth/register";
  }
  rpc CheckEmail(CheckEmailReq) returns (CheckEmailResp){
    option (http.get) = "/auth/checkEmail";
  }
  rpc EmailLogin(EmailLoginReq) returns (EmailLoginResp){
    option (http.post) = "/auth/emailLogin";
  }
  rpc GithubLogin(GithubLoginReq) returns (GithubLoginResp){
    option (http.get) = "/auth/githubLogin";
  }
  rpc GiteeLogin(GiteeLoginReq) returns (GiteeLoginResp){
    option (http.get) = "/auth/giteeLogin";
  }
  rpc RefreshToken(RefreshTokenReq) returns (RefreshTokenResp){
    option (http.post) = "/auth/refreshToken";
  }
  rpc SendEmail(SendEmailReq) returns (SendEmailResp){
    option (http.post) = "/auth/sendEmail";
  }
  rpc SetPasswordByEmail(SetPasswordByEmailReq) returns (SetPasswordByEmailResp){
    option (http.post) = "/auth/setPasswordByEmail";
  }
  rpc SetPasswordByPassword(SetPasswordByPasswordReq) returns (SetPasswordByPasswordReq){
    option (http.post) = "/auth/setPasswordByPassword";
  }
}

service relation {
  rpc CreateRelation(CreateRelationReq) returns (CreateRelationResp){
    option (http.post) = "/relation/createRelation";
  }
  rpc GetFromRelations(GetFromRelationsReq) returns(GetFromRelationsResp){
    option (http.get) = "/relation/getFromRelations";
  }
  rpc GetToRelations(GetToRelationsReq) returns(GetToRelationsResp){
    option (http.get) = "/relation/getToRelations";
  }
  rpc GetRelation(GetRelationReq) returns(GetRelationResp){
    option (http.get) = "/relation/getRelation";
  }
  rpc DeleteRelation(DeleteRelationReq) returns(DeleteRelationResp){
    option (http.post) = "/relation/deleteRelation";
  }
}

service system {
  rpc GetNotifications(GetNotificationsReq) returns(GetNotificationsResp){
    option (http.get) = "/system/getNotifications";
  }
  rpc GetNotificationCount(GetNotificationCountReq) returns(GetNotificationCountResp){
    option (http.get) = "/system/getNotificationCount";
  }
  rpc DeleteNotifications(DeleteNotificationsReq) returns(DeleteNotificationsResp){
    option (http.post) = "/system/deleteNotifications";
  }
  rpc UpdateNotifications(UpdateNotificationsReq) returns(UpdateNotificationsResp){
    option (http.post) = "/system/updateNotifications";
  }
}

service comment {
  rpc CreateComment(CreateCommentReq) returns(CreateCommentResp){
    option (http.post) = "/comment/createComment";
  }
  rpc GetComment(GetCommentReq) returns(GetCommentResp){
    option (http.get) = "/comment/getComment";
  }
  rpc GetComments(GetCommentsReq) returns(GetCommentsResp){
    option (http.get) = "/comment/getComments";
  }
  rpc DeleteComment(DeleteCommentReq) returns(DeleteCommentResp){
    option (http.post) = "/comment/deleteComment";
  }
  rpc UpdateComment(UpdateCommentReq) returns(UpdateCommentResp){
    option (http.post) = "/comment/updateComment";
  }
  rpc SetCommentState(SetCommentStateReq) returns(SetCommentStateResp){
    option (http.post) = "/comment/setCommentState";
  }
  rpc SetCommentAttrs(SetCommentAttrsReq) returns(SetCommentAttrsResp){
    option (http.post) = "/comment/setCommentAttrs";
  }
  rpc GetCommentSubject(GetCommentSubjectReq) returns(GetCommentSubjectResp){
    option (http.get) = "/comment/getCommentSubject";
  }
  rpc CreateCommentSubject(CreateCommentSubjectReq) returns(CreateCommentSubjectResp){
    option (http.post) = "/comment/createCommentSubject";
  }
  rpc UpdateCommentSubject(UpdateCommentSubjectReq) returns(UpdateCommentSubjectResp){
    option (http.post) = "/comment/updateCommentSubject";
  }
  rpc DeleteCommentSubject(DeleteCommentSubjectReq) returns(DeleteCommentSubjectResp){
    option (http.post) = "/comment/deleteCommentSubject";
  }
}

service label {
  rpc CreateLabel(CreateLabelReq) returns(CreateLabelResp){
    option (http.post) = "/label/createLabel";
  }
  rpc DeleteLabel(DeleteLabelReq) returns(DeleteLabelResp){
    option (http.post) = "/label/deleteLabel";
  }
  rpc UpdateLabel(UpdateLabelReq) returns(UpdateLabelResp){
    option (http.post) = "/label/updateLabel";
  }
  rpc GetLabels(GetLabelsReq) returns(GetLabelsResp){
    option (http.get) = "/label/getLabels";
  }
  rpc GetLabel(GetLabelReq) returns(GetLabelResp){
    option (http.get) = "/label/getLabel";
  }
  rpc GetLabelsInBatch(GetLabelsInBatchReq) returns(GetLabelsInBatchResp){
    option (http.get) = "/label/getLabelsInBatch";
  }
}