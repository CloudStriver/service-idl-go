syntax = "proto3";
package cloudmind.system;
option go_package = 'cloudmind/system';
import "basic/pagination.proto";
import "cloudmind/system/common.proto";


message GetNotificationsReq {
  optional string onlyUserId = 1;
  optional int64 onlyType = 2;
  optional bool onlyIsRead = 3;
  optional basic.PaginationOptions paginationOptions = 5;
}

message GetNotificationsResp {
  repeated Notification notifications = 1;
  int64 total = 2;
  string token = 3;
}

message UpdateNotificationReq {

}
message CreateNotificationsReq {
  repeated NotificationInfo notifications = 1;
}

message CreateNotificationsResp {
}

message GetNotificationCountReq {
  optional string onlyUserId = 1;
  optional int64 onlyType = 2;
  optional bool onlyIsRead = 3;
}

message GetNotificationCountResp {
  int64 total = 1;
}

message UpdateNotificationsReq {
  repeated string onlyNotificationIds = 1;
  optional string onlyUserId = 2;
  optional int64 onlyType = 3;
  optional bool onlyIsRead = 4;
  bool isRead = 5;
}

message UpdateNotificationsResp{

}

message DeleteNotificationsReq {
  repeated string onlyNotificationIds = 1;
  optional string onlyUserId = 2;
  optional int64 onlyType = 3;
  optional bool onlyIsRead = 4;
}

message DeleteNotificationsResp {
}

message GetSlidersReq {
  optional int64 onlyType = 1;
  optional int64 onlyIsPublic = 2;
  optional basic.PaginationOptions paginationOptions = 3;
}

message GetSlidersResp {
  repeated Slider sliders = 1;
  int64 total = 2;
  string token = 3;
}

message CreateSliderReq {
  string imageUrl = 1;
  string linkUrl = 2;
  int64 type = 3;
  int64 isPublic = 4;
}

message CreateSliderResp {
}

message UpdateSliderReq {
  string sliderId = 1;
  string imageUrl = 2;
  string linkUrl = 3;
  int64 type = 4;
  int64 isPublic = 5;
}

message UpdateSliderResp {
}

message DeleteSliderReq {
  string sliderId = 1;
}

message DeleteSliderResp {
}



service SystemService {
//  rpc RetrieveNotice(RetrieveNoticeReq) returns (RetrieveNoticeResp);
//  rpc ListNotice(ListNoticeReq) returns (ListNoticeResp);
//  rpc CreateNotice(CreateNoticeReq) returns (CreateNoticeResp);
//  rpc UpdateNotice(UpdateNoticeReq) returns (UpdateNoticeResp);
//  rpc DeleteNotice(DeleteNoticeReq) returns (DeleteNoticeResp);

  // 轮播图
  rpc GetSliders(GetSlidersReq) returns (GetSlidersResp);
  rpc CreateSlider(CreateSliderReq) returns (CreateSliderResp);
  rpc UpdateSlider(UpdateSliderReq) returns (UpdateSliderResp);
  rpc DeleteSlider(DeleteSliderReq) returns (DeleteSliderResp);
  //通知
  rpc GetNotifications(GetNotificationsReq) returns (GetNotificationsResp);
  rpc GetNotificationCount(GetNotificationCountReq) returns (GetNotificationCountResp);
  rpc CreateNotifications(CreateNotificationsReq) returns (CreateNotificationsResp);
  rpc UpdateNotifications(UpdateNotificationsReq) returns (UpdateNotificationsResp);
  rpc DeleteNotifications(DeleteNotificationsReq) returns (DeleteNotificationsResp);
}