// Code generated by goctl. DO NOT EDIT.
// Source: usercenter.proto

package usercenter

import (
	"context"

	"github.com/CloudStriver/service-idl-go/go-zero-gen/usercenter/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddUserRemainderReq          = pb.AddUserRemainderReq
	AddUserRemainderResp         = pb.AddUserRemainderResp
	FindUserByUserIdListReq      = pb.FindUserByUserIdListReq
	FindUserByUserIdListResp     = pb.FindUserByUserIdListResp
	FindUserInfoByUserIdListReq  = pb.FindUserInfoByUserIdListReq
	FindUserInfoByUserIdListResp = pb.FindUserInfoByUserIdListResp
	GenerateTokenReq             = pb.GenerateTokenReq
	GenerateTokenResp            = pb.GenerateTokenResp
	RegisterReq                  = pb.RegisterReq
	RegisterResp                 = pb.RegisterResp
	SendEmailCodeReq             = pb.SendEmailCodeReq
	SendEmailCodeResp            = pb.SendEmailCodeResp
	SendEmailReq                 = pb.SendEmailReq
	SendEmailResp                = pb.SendEmailResp
	Token                        = pb.Token
	UpdateUserReq                = pb.UpdateUserReq
	UpdateUserResp               = pb.UpdateUserResp
	User                         = pb.User
	UserAuth                     = pb.UserAuth

	Usercenter interface {
		FindUserByUserIdList(ctx context.Context, in *FindUserByUserIdListReq, opts ...grpc.CallOption) (*FindUserByUserIdListResp, error)
		SendEmailCode(ctx context.Context, in *SendEmailCodeReq, opts ...grpc.CallOption) (*SendEmailCodeResp, error)
		AddUserRemainder(ctx context.Context, in *AddUserRemainderReq, opts ...grpc.CallOption) (*AddUserRemainderResp, error)
		UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
		AddUserRemainderRollBack(ctx context.Context, in *AddUserRemainderReq, opts ...grpc.CallOption) (*AddUserRemainderResp, error)
		FindUserInfoByUserIdList(ctx context.Context, in *FindUserInfoByUserIdListReq, opts ...grpc.CallOption) (*FindUserInfoByUserIdListResp, error)
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error)
	}

	defaultUsercenter struct {
		cli zrpc.Client
	}
)

func NewUsercenter(cli zrpc.Client) Usercenter {
	return &defaultUsercenter{
		cli: cli,
	}
}

func (m *defaultUsercenter) FindUserByUserIdList(ctx context.Context, in *FindUserByUserIdListReq, opts ...grpc.CallOption) (*FindUserByUserIdListResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.FindUserByUserIdList(ctx, in, opts...)
}

func (m *defaultUsercenter) SendEmailCode(ctx context.Context, in *SendEmailCodeReq, opts ...grpc.CallOption) (*SendEmailCodeResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.SendEmailCode(ctx, in, opts...)
}

func (m *defaultUsercenter) AddUserRemainder(ctx context.Context, in *AddUserRemainderReq, opts ...grpc.CallOption) (*AddUserRemainderResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.AddUserRemainder(ctx, in, opts...)
}

func (m *defaultUsercenter) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.UpdateUser(ctx, in, opts...)
}

func (m *defaultUsercenter) AddUserRemainderRollBack(ctx context.Context, in *AddUserRemainderReq, opts ...grpc.CallOption) (*AddUserRemainderResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.AddUserRemainderRollBack(ctx, in, opts...)
}

func (m *defaultUsercenter) FindUserInfoByUserIdList(ctx context.Context, in *FindUserInfoByUserIdListReq, opts ...grpc.CallOption) (*FindUserInfoByUserIdListResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.FindUserInfoByUserIdList(ctx, in, opts...)
}

func (m *defaultUsercenter) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUsercenter) GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GenerateToken(ctx, in, opts...)
}
