// Code generated by goctl. DO NOT EDIT.
// Source: filecenter.proto

package filecenter

import (
	"context"

	"github.com/CloudStriver/service-idl-go/go-zero-gen/filecenter/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AskUploadFileReq                 = pb.AskUploadFileReq
	AskUploadFileResp                = pb.AskUploadFileResp
	DeleteExpiredFilesReq            = pb.DeleteExpiredFilesReq
	DeleteExpiredFilesResp           = pb.DeleteExpiredFilesResp
	DeleteExpiredShareCodesReq       = pb.DeleteExpiredShareCodesReq
	DeleteExpiredShareCodesResp      = pb.DeleteExpiredShareCodesResp
	File                             = pb.File
	FileInfo                         = pb.FileInfo
	FindFileInfoByFileIdReq          = pb.FindFileInfoByFileIdReq
	FindFileInfoByFileIdResp         = pb.FindFileInfoByFileIdResp
	FindFileInfoInPublicByFileIdReq  = pb.FindFileInfoInPublicByFileIdReq
	FindFileInfoInPublicByFileIdResp = pb.FindFileInfoInPublicByFileIdResp
	FindOssInfoReq                   = pb.FindOssInfoReq
	FindOssInfoResp                  = pb.FindOssInfoResp
	OldFileInfo                      = pb.OldFileInfo
	OssInfo                          = pb.OssInfo
	PublicFile                       = pb.PublicFile
	UploadFileReq                    = pb.UploadFileReq
	UploadFileResp                   = pb.UploadFileResp

	Filecenter interface {
		FindOssInfo(ctx context.Context, in *FindOssInfoReq, opts ...grpc.CallOption) (*FindOssInfoResp, error)
		FindFileInfoInPublicByFileId(ctx context.Context, in *FindFileInfoInPublicByFileIdReq, opts ...grpc.CallOption) (*FindFileInfoInPublicByFileIdResp, error)
		FindFileInfoByFileId(ctx context.Context, in *FindFileInfoByFileIdReq, opts ...grpc.CallOption) (*FindFileInfoByFileIdResp, error)
		DeleteExpiredFiles(ctx context.Context, in *DeleteExpiredFilesReq, opts ...grpc.CallOption) (*DeleteExpiredFilesResp, error)
		DeleteExpiredShareCodes(ctx context.Context, in *DeleteExpiredShareCodesReq, opts ...grpc.CallOption) (*DeleteExpiredShareCodesResp, error)
		UploadFile(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadFileResp, error)
		AskUploadFile(ctx context.Context, in *AskUploadFileReq, opts ...grpc.CallOption) (*AskUploadFileResp, error)
		AskUploadFileRollback(ctx context.Context, in *AskUploadFileReq, opts ...grpc.CallOption) (*AskUploadFileResp, error)
	}

	defaultFilecenter struct {
		cli zrpc.Client
	}
)

func NewFilecenter(cli zrpc.Client) Filecenter {
	return &defaultFilecenter{
		cli: cli,
	}
}

func (m *defaultFilecenter) FindOssInfo(ctx context.Context, in *FindOssInfoReq, opts ...grpc.CallOption) (*FindOssInfoResp, error) {
	client := pb.NewFilecenterClient(m.cli.Conn())
	return client.FindOssInfo(ctx, in, opts...)
}

func (m *defaultFilecenter) FindFileInfoInPublicByFileId(ctx context.Context, in *FindFileInfoInPublicByFileIdReq, opts ...grpc.CallOption) (*FindFileInfoInPublicByFileIdResp, error) {
	client := pb.NewFilecenterClient(m.cli.Conn())
	return client.FindFileInfoInPublicByFileId(ctx, in, opts...)
}

func (m *defaultFilecenter) FindFileInfoByFileId(ctx context.Context, in *FindFileInfoByFileIdReq, opts ...grpc.CallOption) (*FindFileInfoByFileIdResp, error) {
	client := pb.NewFilecenterClient(m.cli.Conn())
	return client.FindFileInfoByFileId(ctx, in, opts...)
}

func (m *defaultFilecenter) DeleteExpiredFiles(ctx context.Context, in *DeleteExpiredFilesReq, opts ...grpc.CallOption) (*DeleteExpiredFilesResp, error) {
	client := pb.NewFilecenterClient(m.cli.Conn())
	return client.DeleteExpiredFiles(ctx, in, opts...)
}

func (m *defaultFilecenter) DeleteExpiredShareCodes(ctx context.Context, in *DeleteExpiredShareCodesReq, opts ...grpc.CallOption) (*DeleteExpiredShareCodesResp, error) {
	client := pb.NewFilecenterClient(m.cli.Conn())
	return client.DeleteExpiredShareCodes(ctx, in, opts...)
}

func (m *defaultFilecenter) UploadFile(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadFileResp, error) {
	client := pb.NewFilecenterClient(m.cli.Conn())
	return client.UploadFile(ctx, in, opts...)
}

func (m *defaultFilecenter) AskUploadFile(ctx context.Context, in *AskUploadFileReq, opts ...grpc.CallOption) (*AskUploadFileResp, error) {
	client := pb.NewFilecenterClient(m.cli.Conn())
	return client.AskUploadFile(ctx, in, opts...)
}

func (m *defaultFilecenter) AskUploadFileRollback(ctx context.Context, in *AskUploadFileReq, opts ...grpc.CallOption) (*AskUploadFileResp, error) {
	client := pb.NewFilecenterClient(m.cli.Conn())
	return client.AskUploadFileRollback(ctx, in, opts...)
}
