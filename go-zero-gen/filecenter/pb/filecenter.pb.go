// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: filecenter.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId     string `protobuf:"bytes,1,opt,name=fileId,proto3" json:"fileId,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type       string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Path       string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	UserId     string `protobuf:"bytes,5,opt,name=userId,proto3" json:"userId,omitempty"`
	FatherId   string `protobuf:"bytes,6,opt,name=fatherId,proto3" json:"fatherId,omitempty"`
	Size       int64  `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	Md5        string `protobuf:"bytes,8,opt,name=md5,proto3" json:"md5,omitempty"`
	UpdateTime int64  `protobuf:"varint,9,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{0}
}

func (x *File) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *File) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *File) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *File) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *File) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *File) GetFatherId() string {
	if x != nil {
		return x.FatherId
	}
	return ""
}

func (x *File) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *File) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *File) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type PublicFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId      string `protobuf:"bytes,1,opt,name=fileId,proto3" json:"fileId,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type        string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Path        string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	UserId      string `protobuf:"bytes,5,opt,name=userId,proto3" json:"userId,omitempty"`
	FatherId    string `protobuf:"bytes,6,opt,name=fatherId,proto3" json:"fatherId,omitempty"`
	Size        int64  `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	Md5         string `protobuf:"bytes,8,opt,name=md5,proto3" json:"md5,omitempty"`
	UpdateTime  int64  `protobuf:"varint,9,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Description string `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *PublicFile) Reset() {
	*x = PublicFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicFile) ProtoMessage() {}

func (x *PublicFile) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicFile.ProtoReflect.Descriptor instead.
func (*PublicFile) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{1}
}

func (x *PublicFile) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *PublicFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PublicFile) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PublicFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PublicFile) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PublicFile) GetFatherId() string {
	if x != nil {
		return x.FatherId
	}
	return ""
}

func (x *PublicFile) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PublicFile) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *PublicFile) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *PublicFile) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CosInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretId     string `protobuf:"bytes,1,opt,name=secretId,proto3" json:"secretId,omitempty"`
	SecretKey    string `protobuf:"bytes,2,opt,name=secretKey,proto3" json:"secretKey,omitempty"`
	SessionToken string `protobuf:"bytes,3,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	BucketName   string `protobuf:"bytes,4,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
}

func (x *CosInfo) Reset() {
	*x = CosInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CosInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CosInfo) ProtoMessage() {}

func (x *CosInfo) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CosInfo.ProtoReflect.Descriptor instead.
func (*CosInfo) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{2}
}

func (x *CosInfo) GetSecretId() string {
	if x != nil {
		return x.SecretId
	}
	return ""
}

func (x *CosInfo) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *CosInfo) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *CosInfo) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

type FindCosInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *FindCosInfoReq) Reset() {
	*x = FindCosInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCosInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCosInfoReq) ProtoMessage() {}

func (x *FindCosInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCosInfoReq.ProtoReflect.Descriptor instead.
func (*FindCosInfoReq) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{3}
}

func (x *FindCosInfoReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type FindCosInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cos   *CosInfo `protobuf:"bytes,1,opt,name=cos,proto3" json:"cos,omitempty"`
	Error string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FindCosInfoResp) Reset() {
	*x = FindCosInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCosInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCosInfoResp) ProtoMessage() {}

func (x *FindCosInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCosInfoResp.ProtoReflect.Descriptor instead.
func (*FindCosInfoResp) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{4}
}

func (x *FindCosInfoResp) GetCos() *CosInfo {
	if x != nil {
		return x.Cos
	}
	return nil
}

func (x *FindCosInfoResp) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type FindFileByMd5Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Md5 string `protobuf:"bytes,1,opt,name=md5,proto3" json:"md5,omitempty"`
}

func (x *FindFileByMd5Req) Reset() {
	*x = FindFileByMd5Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFileByMd5Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFileByMd5Req) ProtoMessage() {}

func (x *FindFileByMd5Req) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFileByMd5Req.ProtoReflect.Descriptor instead.
func (*FindFileByMd5Req) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{5}
}

func (x *FindFileByMd5Req) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

type FindFileByMd5Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok    bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FindFileByMd5Resp) Reset() {
	*x = FindFileByMd5Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFileByMd5Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFileByMd5Resp) ProtoMessage() {}

func (x *FindFileByMd5Resp) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFileByMd5Resp.ProtoReflect.Descriptor instead.
func (*FindFileByMd5Resp) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{6}
}

func (x *FindFileByMd5Resp) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *FindFileByMd5Resp) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type FindFileInfoByFileIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId string `protobuf:"bytes,1,opt,name=fileId,proto3" json:"fileId,omitempty"`
}

func (x *FindFileInfoByFileIdReq) Reset() {
	*x = FindFileInfoByFileIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFileInfoByFileIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFileInfoByFileIdReq) ProtoMessage() {}

func (x *FindFileInfoByFileIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFileInfoByFileIdReq.ProtoReflect.Descriptor instead.
func (*FindFileInfoByFileIdReq) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{7}
}

func (x *FindFileInfoByFileIdReq) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

type FindFileInfoByFileIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File  *File  `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FindFileInfoByFileIdResp) Reset() {
	*x = FindFileInfoByFileIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFileInfoByFileIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFileInfoByFileIdResp) ProtoMessage() {}

func (x *FindFileInfoByFileIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFileInfoByFileIdResp.ProtoReflect.Descriptor instead.
func (*FindFileInfoByFileIdResp) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{8}
}

func (x *FindFileInfoByFileIdResp) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *FindFileInfoByFileIdResp) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type FindFileByFileIdWithUserIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId string `protobuf:"bytes,1,opt,name=fileId,proto3" json:"fileId,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *FindFileByFileIdWithUserIdReq) Reset() {
	*x = FindFileByFileIdWithUserIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFileByFileIdWithUserIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFileByFileIdWithUserIdReq) ProtoMessage() {}

func (x *FindFileByFileIdWithUserIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFileByFileIdWithUserIdReq.ProtoReflect.Descriptor instead.
func (*FindFileByFileIdWithUserIdReq) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{9}
}

func (x *FindFileByFileIdWithUserIdReq) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *FindFileByFileIdWithUserIdReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type FindFileByFileIdWithUserIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File  *File  `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FindFileByFileIdWithUserIdResp) Reset() {
	*x = FindFileByFileIdWithUserIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFileByFileIdWithUserIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFileByFileIdWithUserIdResp) ProtoMessage() {}

func (x *FindFileByFileIdWithUserIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFileByFileIdWithUserIdResp.ProtoReflect.Descriptor instead.
func (*FindFileByFileIdWithUserIdResp) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{10}
}

func (x *FindFileByFileIdWithUserIdResp) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *FindFileByFileIdWithUserIdResp) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type FindFileInfoByFileIdListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileIdList []string `protobuf:"bytes,1,rep,name=fileIdList,proto3" json:"fileIdList,omitempty"`
	UserId     string   `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *FindFileInfoByFileIdListReq) Reset() {
	*x = FindFileInfoByFileIdListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFileInfoByFileIdListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFileInfoByFileIdListReq) ProtoMessage() {}

func (x *FindFileInfoByFileIdListReq) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFileInfoByFileIdListReq.ProtoReflect.Descriptor instead.
func (*FindFileInfoByFileIdListReq) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{11}
}

func (x *FindFileInfoByFileIdListReq) GetFileIdList() []string {
	if x != nil {
		return x.FileIdList
	}
	return nil
}

func (x *FindFileInfoByFileIdListReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type FindFileInfoByFileIdListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileList []*File `protobuf:"bytes,1,rep,name=fileList,proto3" json:"fileList,omitempty"`
	Error    string  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FindFileInfoByFileIdListResp) Reset() {
	*x = FindFileInfoByFileIdListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFileInfoByFileIdListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFileInfoByFileIdListResp) ProtoMessage() {}

func (x *FindFileInfoByFileIdListResp) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFileInfoByFileIdListResp.ProtoReflect.Descriptor instead.
func (*FindFileInfoByFileIdListResp) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{12}
}

func (x *FindFileInfoByFileIdListResp) GetFileList() []*File {
	if x != nil {
		return x.FileList
	}
	return nil
}

func (x *FindFileInfoByFileIdListResp) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type FindFileInfoByFileIdListWithUserIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileIdList []string `protobuf:"bytes,1,rep,name=fileIdList,proto3" json:"fileIdList,omitempty"`
	UserId     string   `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *FindFileInfoByFileIdListWithUserIdReq) Reset() {
	*x = FindFileInfoByFileIdListWithUserIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFileInfoByFileIdListWithUserIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFileInfoByFileIdListWithUserIdReq) ProtoMessage() {}

func (x *FindFileInfoByFileIdListWithUserIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFileInfoByFileIdListWithUserIdReq.ProtoReflect.Descriptor instead.
func (*FindFileInfoByFileIdListWithUserIdReq) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{13}
}

func (x *FindFileInfoByFileIdListWithUserIdReq) GetFileIdList() []string {
	if x != nil {
		return x.FileIdList
	}
	return nil
}

func (x *FindFileInfoByFileIdListWithUserIdReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type FindFileInfoByFileIdListWithUserIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileList []*File `protobuf:"bytes,1,rep,name=fileList,proto3" json:"fileList,omitempty"`
	Error    string  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FindFileInfoByFileIdListWithUserIdResp) Reset() {
	*x = FindFileInfoByFileIdListWithUserIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFileInfoByFileIdListWithUserIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFileInfoByFileIdListWithUserIdResp) ProtoMessage() {}

func (x *FindFileInfoByFileIdListWithUserIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFileInfoByFileIdListWithUserIdResp.ProtoReflect.Descriptor instead.
func (*FindFileInfoByFileIdListWithUserIdResp) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{14}
}

func (x *FindFileInfoByFileIdListWithUserIdResp) GetFileList() []*File {
	if x != nil {
		return x.FileList
	}
	return nil
}

func (x *FindFileInfoByFileIdListWithUserIdResp) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type FindFileListByFatherIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FatherId string `protobuf:"bytes,1,opt,name=fatherId,proto3" json:"fatherId,omitempty"`
}

func (x *FindFileListByFatherIdReq) Reset() {
	*x = FindFileListByFatherIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFileListByFatherIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFileListByFatherIdReq) ProtoMessage() {}

func (x *FindFileListByFatherIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFileListByFatherIdReq.ProtoReflect.Descriptor instead.
func (*FindFileListByFatherIdReq) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{15}
}

func (x *FindFileListByFatherIdReq) GetFatherId() string {
	if x != nil {
		return x.FatherId
	}
	return ""
}

type FindFileListByFatherIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileList []*File `protobuf:"bytes,1,rep,name=fileList,proto3" json:"fileList,omitempty"`
	Error    string  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FindFileListByFatherIdResp) Reset() {
	*x = FindFileListByFatherIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFileListByFatherIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFileListByFatherIdResp) ProtoMessage() {}

func (x *FindFileListByFatherIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFileListByFatherIdResp.ProtoReflect.Descriptor instead.
func (*FindFileListByFatherIdResp) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{16}
}

func (x *FindFileListByFatherIdResp) GetFileList() []*File {
	if x != nil {
		return x.FileList
	}
	return nil
}

func (x *FindFileListByFatherIdResp) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type FindFileListByFatherIdWithUserIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FatherId string `protobuf:"bytes,1,opt,name=fatherId,proto3" json:"fatherId,omitempty"`
	UserId   string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *FindFileListByFatherIdWithUserIdReq) Reset() {
	*x = FindFileListByFatherIdWithUserIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFileListByFatherIdWithUserIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFileListByFatherIdWithUserIdReq) ProtoMessage() {}

func (x *FindFileListByFatherIdWithUserIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFileListByFatherIdWithUserIdReq.ProtoReflect.Descriptor instead.
func (*FindFileListByFatherIdWithUserIdReq) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{17}
}

func (x *FindFileListByFatherIdWithUserIdReq) GetFatherId() string {
	if x != nil {
		return x.FatherId
	}
	return ""
}

func (x *FindFileListByFatherIdWithUserIdReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type FindFileListByFatherIdWithUserIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileList []*File `protobuf:"bytes,1,rep,name=fileList,proto3" json:"fileList,omitempty"`
	Error    string  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FindFileListByFatherIdWithUserIdResp) Reset() {
	*x = FindFileListByFatherIdWithUserIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFileListByFatherIdWithUserIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFileListByFatherIdWithUserIdResp) ProtoMessage() {}

func (x *FindFileListByFatherIdWithUserIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFileListByFatherIdWithUserIdResp.ProtoReflect.Descriptor instead.
func (*FindFileListByFatherIdWithUserIdResp) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{18}
}

func (x *FindFileListByFatherIdWithUserIdResp) GetFileList() []*File {
	if x != nil {
		return x.FileList
	}
	return nil
}

func (x *FindFileListByFatherIdWithUserIdResp) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type FindAllFileByFatherIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FatherId string `protobuf:"bytes,1,opt,name=fatherId,proto3" json:"fatherId,omitempty"`
	UserId   string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *FindAllFileByFatherIdReq) Reset() {
	*x = FindAllFileByFatherIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllFileByFatherIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllFileByFatherIdReq) ProtoMessage() {}

func (x *FindAllFileByFatherIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllFileByFatherIdReq.ProtoReflect.Descriptor instead.
func (*FindAllFileByFatherIdReq) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{19}
}

func (x *FindAllFileByFatherIdReq) GetFatherId() string {
	if x != nil {
		return x.FatherId
	}
	return ""
}

func (x *FindAllFileByFatherIdReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type FindAllFileByFatherIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileList []*File `protobuf:"bytes,1,rep,name=fileList,proto3" json:"fileList,omitempty"`
	Error    string  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FindAllFileByFatherIdResp) Reset() {
	*x = FindAllFileByFatherIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllFileByFatherIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllFileByFatherIdResp) ProtoMessage() {}

func (x *FindAllFileByFatherIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllFileByFatherIdResp.ProtoReflect.Descriptor instead.
func (*FindAllFileByFatherIdResp) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{20}
}

func (x *FindAllFileByFatherIdResp) GetFileList() []*File {
	if x != nil {
		return x.FileList
	}
	return nil
}

func (x *FindAllFileByFatherIdResp) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type CalFileSizeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Size   *int64 `protobuf:"varint,2,opt,name=size,proto3,oneof" json:"size,omitempty"`
	Path   string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Op     bool   `protobuf:"varint,4,opt,name=op,proto3" json:"op,omitempty"`
}

func (x *CalFileSizeReq) Reset() {
	*x = CalFileSizeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalFileSizeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalFileSizeReq) ProtoMessage() {}

func (x *CalFileSizeReq) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalFileSizeReq.ProtoReflect.Descriptor instead.
func (*CalFileSizeReq) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{21}
}

func (x *CalFileSizeReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CalFileSizeReq) GetSize() int64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *CalFileSizeReq) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CalFileSizeReq) GetOp() bool {
	if x != nil {
		return x.Op
	}
	return false
}

type CalFileSizeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CalFileSizeResp) Reset() {
	*x = CalFileSizeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalFileSizeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalFileSizeResp) ProtoMessage() {}

func (x *CalFileSizeResp) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalFileSizeResp.ProtoReflect.Descriptor instead.
func (*CalFileSizeResp) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{22}
}

func (x *CalFileSizeResp) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type FindFileCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindFileCountReq) Reset() {
	*x = FindFileCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFileCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFileCountReq) ProtoMessage() {}

func (x *FindFileCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFileCountReq.ProtoReflect.Descriptor instead.
func (*FindFileCountReq) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{23}
}

type FindFileCountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindFileCountResp) Reset() {
	*x = FindFileCountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFileCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFileCountResp) ProtoMessage() {}

func (x *FindFileCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFileCountResp.ProtoReflect.Descriptor instead.
func (*FindFileCountResp) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{24}
}

type FindFileTypeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindFileTypeReq) Reset() {
	*x = FindFileTypeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFileTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFileTypeReq) ProtoMessage() {}

func (x *FindFileTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFileTypeReq.ProtoReflect.Descriptor instead.
func (*FindFileTypeReq) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{25}
}

type FindFileTypeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindFileTypeResp) Reset() {
	*x = FindFileTypeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFileTypeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFileTypeResp) ProtoMessage() {}

func (x *FindFileTypeResp) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFileTypeResp.ProtoReflect.Descriptor instead.
func (*FindFileTypeResp) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{26}
}

type FindFileInfoInPublicByFileIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId string `protobuf:"bytes,1,opt,name=fileId,proto3" json:"fileId,omitempty"`
}

func (x *FindFileInfoInPublicByFileIdReq) Reset() {
	*x = FindFileInfoInPublicByFileIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFileInfoInPublicByFileIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFileInfoInPublicByFileIdReq) ProtoMessage() {}

func (x *FindFileInfoInPublicByFileIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFileInfoInPublicByFileIdReq.ProtoReflect.Descriptor instead.
func (*FindFileInfoInPublicByFileIdReq) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{27}
}

func (x *FindFileInfoInPublicByFileIdReq) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

type FindFileInfoInPublicByFileIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File  *PublicFile `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Error string      `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FindFileInfoInPublicByFileIdResp) Reset() {
	*x = FindFileInfoInPublicByFileIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFileInfoInPublicByFileIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFileInfoInPublicByFileIdResp) ProtoMessage() {}

func (x *FindFileInfoInPublicByFileIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFileInfoInPublicByFileIdResp.ProtoReflect.Descriptor instead.
func (*FindFileInfoInPublicByFileIdResp) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{28}
}

func (x *FindFileInfoInPublicByFileIdResp) GetFile() *PublicFile {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *FindFileInfoInPublicByFileIdResp) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type FindPublicFileByFileIdWithUserIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId string `protobuf:"bytes,1,opt,name=fileId,proto3" json:"fileId,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *FindPublicFileByFileIdWithUserIdReq) Reset() {
	*x = FindPublicFileByFileIdWithUserIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPublicFileByFileIdWithUserIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPublicFileByFileIdWithUserIdReq) ProtoMessage() {}

func (x *FindPublicFileByFileIdWithUserIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPublicFileByFileIdWithUserIdReq.ProtoReflect.Descriptor instead.
func (*FindPublicFileByFileIdWithUserIdReq) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{29}
}

func (x *FindPublicFileByFileIdWithUserIdReq) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *FindPublicFileByFileIdWithUserIdReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type FindPublicFileByFileIdWithUserIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File  *PublicFile `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Error string      `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FindPublicFileByFileIdWithUserIdResp) Reset() {
	*x = FindPublicFileByFileIdWithUserIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPublicFileByFileIdWithUserIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPublicFileByFileIdWithUserIdResp) ProtoMessage() {}

func (x *FindPublicFileByFileIdWithUserIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPublicFileByFileIdWithUserIdResp.ProtoReflect.Descriptor instead.
func (*FindPublicFileByFileIdWithUserIdResp) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{30}
}

func (x *FindPublicFileByFileIdWithUserIdResp) GetFile() *PublicFile {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *FindPublicFileByFileIdWithUserIdResp) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type FindPublicByFileIdListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileIdList []string `protobuf:"bytes,1,rep,name=fileIdList,proto3" json:"fileIdList,omitempty"`
	Error      string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FindPublicByFileIdListReq) Reset() {
	*x = FindPublicByFileIdListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPublicByFileIdListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPublicByFileIdListReq) ProtoMessage() {}

func (x *FindPublicByFileIdListReq) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPublicByFileIdListReq.ProtoReflect.Descriptor instead.
func (*FindPublicByFileIdListReq) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{31}
}

func (x *FindPublicByFileIdListReq) GetFileIdList() []string {
	if x != nil {
		return x.FileIdList
	}
	return nil
}

func (x *FindPublicByFileIdListReq) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type FindPublicByFileIdListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileIdList []*PublicFile `protobuf:"bytes,1,rep,name=fileIdList,proto3" json:"fileIdList,omitempty"`
	Error      string        `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FindPublicByFileIdListResp) Reset() {
	*x = FindPublicByFileIdListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPublicByFileIdListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPublicByFileIdListResp) ProtoMessage() {}

func (x *FindPublicByFileIdListResp) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPublicByFileIdListResp.ProtoReflect.Descriptor instead.
func (*FindPublicByFileIdListResp) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{32}
}

func (x *FindPublicByFileIdListResp) GetFileIdList() []*PublicFile {
	if x != nil {
		return x.FileIdList
	}
	return nil
}

func (x *FindPublicByFileIdListResp) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type CalPublicFileSizeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Size   *int64 `protobuf:"varint,2,opt,name=size,proto3,oneof" json:"size,omitempty"`
	Path   string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Op     bool   `protobuf:"varint,4,opt,name=op,proto3" json:"op,omitempty"`
}

func (x *CalPublicFileSizeReq) Reset() {
	*x = CalPublicFileSizeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalPublicFileSizeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalPublicFileSizeReq) ProtoMessage() {}

func (x *CalPublicFileSizeReq) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalPublicFileSizeReq.ProtoReflect.Descriptor instead.
func (*CalPublicFileSizeReq) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{33}
}

func (x *CalPublicFileSizeReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CalPublicFileSizeReq) GetSize() int64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *CalPublicFileSizeReq) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CalPublicFileSizeReq) GetOp() bool {
	if x != nil {
		return x.Op
	}
	return false
}

type CalPublicFileSizeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CalPublicFileSizeResp) Reset() {
	*x = CalPublicFileSizeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalPublicFileSizeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalPublicFileSizeResp) ProtoMessage() {}

func (x *CalPublicFileSizeResp) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalPublicFileSizeResp.ProtoReflect.Descriptor instead.
func (*CalPublicFileSizeResp) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{34}
}

func (x *CalPublicFileSizeResp) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type FindPublicFileListByUserIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *FindPublicFileListByUserIdReq) Reset() {
	*x = FindPublicFileListByUserIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPublicFileListByUserIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPublicFileListByUserIdReq) ProtoMessage() {}

func (x *FindPublicFileListByUserIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPublicFileListByUserIdReq.ProtoReflect.Descriptor instead.
func (*FindPublicFileListByUserIdReq) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{35}
}

func (x *FindPublicFileListByUserIdReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type FindPublicFileListByUserIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileList []*PublicFile `protobuf:"bytes,1,rep,name=fileList,proto3" json:"fileList,omitempty"`
}

func (x *FindPublicFileListByUserIdResp) Reset() {
	*x = FindPublicFileListByUserIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPublicFileListByUserIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPublicFileListByUserIdResp) ProtoMessage() {}

func (x *FindPublicFileListByUserIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPublicFileListByUserIdResp.ProtoReflect.Descriptor instead.
func (*FindPublicFileListByUserIdResp) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{36}
}

func (x *FindPublicFileListByUserIdResp) GetFileList() []*PublicFile {
	if x != nil {
		return x.FileList
	}
	return nil
}

type FindPublicFileListByFatherIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FatherId string `protobuf:"bytes,1,opt,name=fatherId,proto3" json:"fatherId,omitempty"`
}

func (x *FindPublicFileListByFatherIdReq) Reset() {
	*x = FindPublicFileListByFatherIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPublicFileListByFatherIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPublicFileListByFatherIdReq) ProtoMessage() {}

func (x *FindPublicFileListByFatherIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPublicFileListByFatherIdReq.ProtoReflect.Descriptor instead.
func (*FindPublicFileListByFatherIdReq) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{37}
}

func (x *FindPublicFileListByFatherIdReq) GetFatherId() string {
	if x != nil {
		return x.FatherId
	}
	return ""
}

type FindPublicFileListByFatherIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileList []*PublicFile `protobuf:"bytes,1,rep,name=fileList,proto3" json:"fileList,omitempty"`
	Error    string        `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FindPublicFileListByFatherIdResp) Reset() {
	*x = FindPublicFileListByFatherIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPublicFileListByFatherIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPublicFileListByFatherIdResp) ProtoMessage() {}

func (x *FindPublicFileListByFatherIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPublicFileListByFatherIdResp.ProtoReflect.Descriptor instead.
func (*FindPublicFileListByFatherIdResp) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{38}
}

func (x *FindPublicFileListByFatherIdResp) GetFileList() []*PublicFile {
	if x != nil {
		return x.FileList
	}
	return nil
}

func (x *FindPublicFileListByFatherIdResp) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type FindAllPublicFileByFatherIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FatherId string `protobuf:"bytes,1,opt,name=fatherId,proto3" json:"fatherId,omitempty"`
}

func (x *FindAllPublicFileByFatherIdReq) Reset() {
	*x = FindAllPublicFileByFatherIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllPublicFileByFatherIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllPublicFileByFatherIdReq) ProtoMessage() {}

func (x *FindAllPublicFileByFatherIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllPublicFileByFatherIdReq.ProtoReflect.Descriptor instead.
func (*FindAllPublicFileByFatherIdReq) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{39}
}

func (x *FindAllPublicFileByFatherIdReq) GetFatherId() string {
	if x != nil {
		return x.FatherId
	}
	return ""
}

type FindAllPublicFileByFatherIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileList []*PublicFile `protobuf:"bytes,1,rep,name=fileList,proto3" json:"fileList,omitempty"`
	Error    string        `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FindAllPublicFileByFatherIdResp) Reset() {
	*x = FindAllPublicFileByFatherIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllPublicFileByFatherIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllPublicFileByFatherIdResp) ProtoMessage() {}

func (x *FindAllPublicFileByFatherIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllPublicFileByFatherIdResp.ProtoReflect.Descriptor instead.
func (*FindAllPublicFileByFatherIdResp) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{40}
}

func (x *FindAllPublicFileByFatherIdResp) GetFileList() []*PublicFile {
	if x != nil {
		return x.FileList
	}
	return nil
}

func (x *FindAllPublicFileByFatherIdResp) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type FindFileBySharingCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharingCode string `protobuf:"bytes,1,opt,name=sharingCode,proto3" json:"sharingCode,omitempty"`
}

func (x *FindFileBySharingCodeReq) Reset() {
	*x = FindFileBySharingCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFileBySharingCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFileBySharingCodeReq) ProtoMessage() {}

func (x *FindFileBySharingCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFileBySharingCodeReq.ProtoReflect.Descriptor instead.
func (*FindFileBySharingCodeReq) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{41}
}

func (x *FindFileBySharingCodeReq) GetSharingCode() string {
	if x != nil {
		return x.SharingCode
	}
	return ""
}

type FindFileBySharingCodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileList []*File `protobuf:"bytes,1,rep,name=fileList,proto3" json:"fileList,omitempty"`
	Error    string  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FindFileBySharingCodeResp) Reset() {
	*x = FindFileBySharingCodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFileBySharingCodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFileBySharingCodeResp) ProtoMessage() {}

func (x *FindFileBySharingCodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFileBySharingCodeResp.ProtoReflect.Descriptor instead.
func (*FindFileBySharingCodeResp) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{42}
}

func (x *FindFileBySharingCodeResp) GetFileList() []*File {
	if x != nil {
		return x.FileList
	}
	return nil
}

func (x *FindFileBySharingCodeResp) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type DeleteExpiredFilesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteExpiredFilesReq) Reset() {
	*x = DeleteExpiredFilesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExpiredFilesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExpiredFilesReq) ProtoMessage() {}

func (x *DeleteExpiredFilesReq) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExpiredFilesReq.ProtoReflect.Descriptor instead.
func (*DeleteExpiredFilesReq) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{43}
}

type DeleteExpiredFilesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteExpiredFilesResp) Reset() {
	*x = DeleteExpiredFilesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExpiredFilesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExpiredFilesResp) ProtoMessage() {}

func (x *DeleteExpiredFilesResp) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExpiredFilesResp.ProtoReflect.Descriptor instead.
func (*DeleteExpiredFilesResp) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{44}
}

type DeleteExpiredShareCodesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteExpiredShareCodesReq) Reset() {
	*x = DeleteExpiredShareCodesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExpiredShareCodesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExpiredShareCodesReq) ProtoMessage() {}

func (x *DeleteExpiredShareCodesReq) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExpiredShareCodesReq.ProtoReflect.Descriptor instead.
func (*DeleteExpiredShareCodesReq) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{45}
}

type DeleteExpiredShareCodesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteExpiredShareCodesResp) Reset() {
	*x = DeleteExpiredShareCodesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExpiredShareCodesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExpiredShareCodesResp) ProtoMessage() {}

func (x *DeleteExpiredShareCodesResp) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExpiredShareCodesResp.ProtoReflect.Descriptor instead.
func (*DeleteExpiredShareCodesResp) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{46}
}

type UploadFileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File [][]byte `protobuf:"bytes,1,rep,name=file,proto3" json:"file,omitempty"`
	Name []string `protobuf:"bytes,2,rep,name=name,proto3" json:"name,omitempty"`
}

func (x *UploadFileReq) Reset() {
	*x = UploadFileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadFileReq) ProtoMessage() {}

func (x *UploadFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadFileReq.ProtoReflect.Descriptor instead.
func (*UploadFileReq) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{47}
}

func (x *UploadFileReq) GetFile() [][]byte {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *UploadFileReq) GetName() []string {
	if x != nil {
		return x.Name
	}
	return nil
}

type UploadFileResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UploadFileResp) Reset() {
	*x = UploadFileResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadFileResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadFileResp) ProtoMessage() {}

func (x *UploadFileResp) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadFileResp.ProtoReflect.Descriptor instead.
func (*UploadFileResp) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{48}
}

type AskUploadFileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size     int64  `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	UserId   string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type     string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Md5      string `protobuf:"bytes,5,opt,name=md5,proto3" json:"md5,omitempty"`
	FatherId string `protobuf:"bytes,6,opt,name=fatherId,proto3" json:"fatherId,omitempty"`
	FileId   string `protobuf:"bytes,7,opt,name=fileId,proto3" json:"fileId,omitempty"`
	Ok       bool   `protobuf:"varint,8,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *AskUploadFileReq) Reset() {
	*x = AskUploadFileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskUploadFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskUploadFileReq) ProtoMessage() {}

func (x *AskUploadFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskUploadFileReq.ProtoReflect.Descriptor instead.
func (*AskUploadFileReq) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{49}
}

func (x *AskUploadFileReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *AskUploadFileReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AskUploadFileReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AskUploadFileReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AskUploadFileReq) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *AskUploadFileReq) GetFatherId() string {
	if x != nil {
		return x.FatherId
	}
	return ""
}

func (x *AskUploadFileReq) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *AskUploadFileReq) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type AskUploadFileResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AskUploadFileResp) Reset() {
	*x = AskUploadFileResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecenter_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskUploadFileResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskUploadFileResp) ProtoMessage() {}

func (x *AskUploadFileResp) ProtoReflect() protoreflect.Message {
	mi := &file_filecenter_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskUploadFileResp.ProtoReflect.Descriptor instead.
func (*AskUploadFileResp) Descriptor() ([]byte, []int) {
	return file_filecenter_proto_rawDescGZIP(), []int{50}
}

var File_filecenter_proto protoreflect.FileDescriptor

var file_filecenter_proto_rawDesc = []byte{
	0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x22, 0xd4, 0x01, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x64, 0x35, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xfc, 0x01,
	0x0a, 0x0a, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x87, 0x01, 0x0a,
	0x07, 0x43, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x28, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x46, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x03, 0x63, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x63,
	0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x24, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x4d, 0x64, 0x35, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x64, 0x35, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x22, 0x39,
	0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x4d, 0x64, 0x35, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x02, 0x6f, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x31, 0x0a, 0x17, 0x46, 0x69, 0x6e,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x18,
	0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4f, 0x0a, 0x1d,
	0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x54, 0x0a,
	0x1e, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x1c, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x55, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x1c, 0x46, 0x69,
	0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x5f, 0x0a, 0x25, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x26, 0x46, 0x69, 0x6e, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x24, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x37, 0x0a,
	0x19, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x46,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x46, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x59, 0x0a, 0x23, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x46, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x24, 0x46,
	0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x46, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x49, 0x64, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x4e, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79,
	0x46, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x57, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79,
	0x46, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x6e, 0x0a, 0x0e, 0x43, 0x61, 0x6c, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x70, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x27, 0x0a, 0x0f, 0x43, 0x61, 0x6c, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x12, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x22, 0x13, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x11, 0x0a, 0x0f, 0x46, 0x69,
	0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x22, 0x12, 0x0a,
	0x10, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x39, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x49, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x20,
	0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x22, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x55, 0x0a, 0x23, 0x46, 0x69,
	0x6e, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x60, 0x0a, 0x24, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46,
	0x69, 0x6c, 0x65, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x57, 0x69, 0x74, 0x68, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x51, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x62, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x74, 0x0a, 0x14, 0x43, 0x61,
	0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x22, 0x2d, 0x0a, 0x15, 0x43, 0x61, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x37, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x64,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3d, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x46, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x46, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62,
	0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x3c, 0x0a, 0x1e, 0x46,
	0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65,
	0x42, 0x79, 0x46, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x1f, 0x46, 0x69, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79,
	0x46, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x3c,
	0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x53, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x57, 0x0a, 0x19,
	0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x22, 0x18,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x37, 0x0a, 0x0d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x10,
	0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x22, 0xbc, 0x01, 0x0a, 0x10, 0x41, 0x73, 0x6b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x22,
	0x13, 0x0a, 0x11, 0x41, 0x73, 0x6b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x32, 0xe1, 0x10, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x43, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0d, 0x46,
	0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x4d, 0x64, 0x35, 0x12, 0x14, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x4d, 0x64, 0x35, 0x52,
	0x65, 0x71, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x42, 0x79, 0x4d, 0x64, 0x35, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x14, 0x46, 0x69, 0x6e,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x63, 0x0a, 0x1a,
	0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x5d, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x7b, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x2a, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a,
	0x16, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x46,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x46, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x46, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x75, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x46, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64,
	0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x46, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x46, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x57,
	0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a,
	0x15, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x46, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x41, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x46, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c,
	0x6c, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x46, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6c, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0d, 0x46,
	0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x0c, 0x46, 0x69, 0x6e,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x13,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x69, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x42, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x42, 0x79, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x75,
	0x0a, 0x20, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65,
	0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x27, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x57, 0x69,
	0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x42,
	0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x42,
	0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x42, 0x79,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48,
	0x0a, 0x11, 0x43, 0x61, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6c, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x61, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x63, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x69, 0x0a,
	0x1c, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x79, 0x46, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x46, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x46, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64,
	0x41, 0x6c, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x46,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79,
	0x46, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69,
	0x6c, 0x65, 0x42, 0x79, 0x46, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x54, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x53, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0d, 0x41,
	0x73, 0x6b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x73, 0x6b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x6b, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x15, 0x41, 0x73, 0x6b,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x6b, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73,
	0x6b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x4b, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5a, 0x0a, 0x17,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_filecenter_proto_rawDescOnce sync.Once
	file_filecenter_proto_rawDescData = file_filecenter_proto_rawDesc
)

func file_filecenter_proto_rawDescGZIP() []byte {
	file_filecenter_proto_rawDescOnce.Do(func() {
		file_filecenter_proto_rawDescData = protoimpl.X.CompressGZIP(file_filecenter_proto_rawDescData)
	})
	return file_filecenter_proto_rawDescData
}

var file_filecenter_proto_msgTypes = make([]protoimpl.MessageInfo, 51)
var file_filecenter_proto_goTypes = []interface{}{
	(*File)(nil),                                   // 0: pb.File
	(*PublicFile)(nil),                             // 1: pb.PublicFile
	(*CosInfo)(nil),                                // 2: pb.CosInfo
	(*FindCosInfoReq)(nil),                         // 3: pb.FindCosInfoReq
	(*FindCosInfoResp)(nil),                        // 4: pb.FindCosInfoResp
	(*FindFileByMd5Req)(nil),                       // 5: pb.FindFileByMd5Req
	(*FindFileByMd5Resp)(nil),                      // 6: pb.FindFileByMd5Resp
	(*FindFileInfoByFileIdReq)(nil),                // 7: pb.FindFileInfoByFileIdReq
	(*FindFileInfoByFileIdResp)(nil),               // 8: pb.FindFileInfoByFileIdResp
	(*FindFileByFileIdWithUserIdReq)(nil),          // 9: pb.FindFileByFileIdWithUserIdReq
	(*FindFileByFileIdWithUserIdResp)(nil),         // 10: pb.FindFileByFileIdWithUserIdResp
	(*FindFileInfoByFileIdListReq)(nil),            // 11: pb.FindFileInfoByFileIdListReq
	(*FindFileInfoByFileIdListResp)(nil),           // 12: pb.FindFileInfoByFileIdListResp
	(*FindFileInfoByFileIdListWithUserIdReq)(nil),  // 13: pb.FindFileInfoByFileIdListWithUserIdReq
	(*FindFileInfoByFileIdListWithUserIdResp)(nil), // 14: pb.FindFileInfoByFileIdListWithUserIdResp
	(*FindFileListByFatherIdReq)(nil),              // 15: pb.FindFileListByFatherIdReq
	(*FindFileListByFatherIdResp)(nil),             // 16: pb.FindFileListByFatherIdResp
	(*FindFileListByFatherIdWithUserIdReq)(nil),    // 17: pb.FindFileListByFatherIdWithUserIdReq
	(*FindFileListByFatherIdWithUserIdResp)(nil),   // 18: pb.FindFileListByFatherIdWithUserIdResp
	(*FindAllFileByFatherIdReq)(nil),               // 19: pb.FindAllFileByFatherIdReq
	(*FindAllFileByFatherIdResp)(nil),              // 20: pb.FindAllFileByFatherIdResp
	(*CalFileSizeReq)(nil),                         // 21: pb.CalFileSizeReq
	(*CalFileSizeResp)(nil),                        // 22: pb.CalFileSizeResp
	(*FindFileCountReq)(nil),                       // 23: pb.FindFileCountReq
	(*FindFileCountResp)(nil),                      // 24: pb.FindFileCountResp
	(*FindFileTypeReq)(nil),                        // 25: pb.FindFileTypeReq
	(*FindFileTypeResp)(nil),                       // 26: pb.FindFileTypeResp
	(*FindFileInfoInPublicByFileIdReq)(nil),        // 27: pb.FindFileInfoInPublicByFileIdReq
	(*FindFileInfoInPublicByFileIdResp)(nil),       // 28: pb.FindFileInfoInPublicByFileIdResp
	(*FindPublicFileByFileIdWithUserIdReq)(nil),    // 29: pb.FindPublicFileByFileIdWithUserIdReq
	(*FindPublicFileByFileIdWithUserIdResp)(nil),   // 30: pb.FindPublicFileByFileIdWithUserIdResp
	(*FindPublicByFileIdListReq)(nil),              // 31: pb.FindPublicByFileIdListReq
	(*FindPublicByFileIdListResp)(nil),             // 32: pb.FindPublicByFileIdListResp
	(*CalPublicFileSizeReq)(nil),                   // 33: pb.CalPublicFileSizeReq
	(*CalPublicFileSizeResp)(nil),                  // 34: pb.CalPublicFileSizeResp
	(*FindPublicFileListByUserIdReq)(nil),          // 35: pb.FindPublicFileListByUserIdReq
	(*FindPublicFileListByUserIdResp)(nil),         // 36: pb.FindPublicFileListByUserIdResp
	(*FindPublicFileListByFatherIdReq)(nil),        // 37: pb.FindPublicFileListByFatherIdReq
	(*FindPublicFileListByFatherIdResp)(nil),       // 38: pb.FindPublicFileListByFatherIdResp
	(*FindAllPublicFileByFatherIdReq)(nil),         // 39: pb.FindAllPublicFileByFatherIdReq
	(*FindAllPublicFileByFatherIdResp)(nil),        // 40: pb.FindAllPublicFileByFatherIdResp
	(*FindFileBySharingCodeReq)(nil),               // 41: pb.FindFileBySharingCodeReq
	(*FindFileBySharingCodeResp)(nil),              // 42: pb.FindFileBySharingCodeResp
	(*DeleteExpiredFilesReq)(nil),                  // 43: pb.DeleteExpiredFilesReq
	(*DeleteExpiredFilesResp)(nil),                 // 44: pb.DeleteExpiredFilesResp
	(*DeleteExpiredShareCodesReq)(nil),             // 45: pb.DeleteExpiredShareCodesReq
	(*DeleteExpiredShareCodesResp)(nil),            // 46: pb.DeleteExpiredShareCodesResp
	(*UploadFileReq)(nil),                          // 47: pb.UploadFileReq
	(*UploadFileResp)(nil),                         // 48: pb.UploadFileResp
	(*AskUploadFileReq)(nil),                       // 49: pb.AskUploadFileReq
	(*AskUploadFileResp)(nil),                      // 50: pb.AskUploadFileResp
}
var file_filecenter_proto_depIdxs = []int32{
	2,  // 0: pb.FindCosInfoResp.cos:type_name -> pb.CosInfo
	0,  // 1: pb.FindFileInfoByFileIdResp.file:type_name -> pb.File
	0,  // 2: pb.FindFileByFileIdWithUserIdResp.file:type_name -> pb.File
	0,  // 3: pb.FindFileInfoByFileIdListResp.fileList:type_name -> pb.File
	0,  // 4: pb.FindFileInfoByFileIdListWithUserIdResp.fileList:type_name -> pb.File
	0,  // 5: pb.FindFileListByFatherIdResp.fileList:type_name -> pb.File
	0,  // 6: pb.FindFileListByFatherIdWithUserIdResp.fileList:type_name -> pb.File
	0,  // 7: pb.FindAllFileByFatherIdResp.fileList:type_name -> pb.File
	1,  // 8: pb.FindFileInfoInPublicByFileIdResp.file:type_name -> pb.PublicFile
	1,  // 9: pb.FindPublicFileByFileIdWithUserIdResp.file:type_name -> pb.PublicFile
	1,  // 10: pb.FindPublicByFileIdListResp.fileIdList:type_name -> pb.PublicFile
	1,  // 11: pb.FindPublicFileListByUserIdResp.fileList:type_name -> pb.PublicFile
	1,  // 12: pb.FindPublicFileListByFatherIdResp.fileList:type_name -> pb.PublicFile
	1,  // 13: pb.FindAllPublicFileByFatherIdResp.fileList:type_name -> pb.PublicFile
	0,  // 14: pb.FindFileBySharingCodeResp.fileList:type_name -> pb.File
	3,  // 15: pb.filecenter.FindCosInfo:input_type -> pb.FindCosInfoReq
	5,  // 16: pb.filecenter.FindFileByMd5:input_type -> pb.FindFileByMd5Req
	7,  // 17: pb.filecenter.FindFileInfoByFileId:input_type -> pb.FindFileInfoByFileIdReq
	9,  // 18: pb.filecenter.FindFileByFileIdWithUserId:input_type -> pb.FindFileByFileIdWithUserIdReq
	11, // 19: pb.filecenter.FindFileInfoByFileIdList:input_type -> pb.FindFileInfoByFileIdListReq
	13, // 20: pb.filecenter.FindFileInfoByFileIdListWithUserId:input_type -> pb.FindFileInfoByFileIdListWithUserIdReq
	15, // 21: pb.filecenter.FindFileListByFatherId:input_type -> pb.FindFileListByFatherIdReq
	17, // 22: pb.filecenter.FindFileListByFatherIdWithUserId:input_type -> pb.FindFileListByFatherIdWithUserIdReq
	19, // 23: pb.filecenter.FindAllFileByFatherId:input_type -> pb.FindAllFileByFatherIdReq
	21, // 24: pb.filecenter.CalFileSize:input_type -> pb.CalFileSizeReq
	23, // 25: pb.filecenter.FindFileCount:input_type -> pb.FindFileCountReq
	25, // 26: pb.filecenter.FindFileType:input_type -> pb.FindFileTypeReq
	27, // 27: pb.filecenter.FindFileInfoInPublicByFileId:input_type -> pb.FindFileInfoInPublicByFileIdReq
	29, // 28: pb.filecenter.FindPublicFileByFileIdWithUserId:input_type -> pb.FindPublicFileByFileIdWithUserIdReq
	31, // 29: pb.filecenter.FindPublicByFileIdList:input_type -> pb.FindPublicByFileIdListReq
	33, // 30: pb.filecenter.CalPublicFileSize:input_type -> pb.CalPublicFileSizeReq
	35, // 31: pb.filecenter.FindPublicFileListByUserId:input_type -> pb.FindPublicFileListByUserIdReq
	37, // 32: pb.filecenter.FindPublicFileListByFatherId:input_type -> pb.FindPublicFileListByFatherIdReq
	39, // 33: pb.filecenter.FindAllPublicFileByFatherId:input_type -> pb.FindAllPublicFileByFatherIdReq
	41, // 34: pb.filecenter.FindFileBySharingCode:input_type -> pb.FindFileBySharingCodeReq
	47, // 35: pb.filecenter.UploadFile:input_type -> pb.UploadFileReq
	49, // 36: pb.filecenter.AskUploadFile:input_type -> pb.AskUploadFileReq
	49, // 37: pb.filecenter.AskUploadFileRollback:input_type -> pb.AskUploadFileReq
	43, // 38: pb.filecenter.DeleteExpiredFiles:input_type -> pb.DeleteExpiredFilesReq
	45, // 39: pb.filecenter.DeleteExpiredShareCodes:input_type -> pb.DeleteExpiredShareCodesReq
	4,  // 40: pb.filecenter.FindCosInfo:output_type -> pb.FindCosInfoResp
	6,  // 41: pb.filecenter.FindFileByMd5:output_type -> pb.FindFileByMd5Resp
	8,  // 42: pb.filecenter.FindFileInfoByFileId:output_type -> pb.FindFileInfoByFileIdResp
	10, // 43: pb.filecenter.FindFileByFileIdWithUserId:output_type -> pb.FindFileByFileIdWithUserIdResp
	12, // 44: pb.filecenter.FindFileInfoByFileIdList:output_type -> pb.FindFileInfoByFileIdListResp
	14, // 45: pb.filecenter.FindFileInfoByFileIdListWithUserId:output_type -> pb.FindFileInfoByFileIdListWithUserIdResp
	16, // 46: pb.filecenter.FindFileListByFatherId:output_type -> pb.FindFileListByFatherIdResp
	18, // 47: pb.filecenter.FindFileListByFatherIdWithUserId:output_type -> pb.FindFileListByFatherIdWithUserIdResp
	20, // 48: pb.filecenter.FindAllFileByFatherId:output_type -> pb.FindAllFileByFatherIdResp
	22, // 49: pb.filecenter.CalFileSize:output_type -> pb.CalFileSizeResp
	24, // 50: pb.filecenter.FindFileCount:output_type -> pb.FindFileCountResp
	25, // 51: pb.filecenter.FindFileType:output_type -> pb.FindFileTypeReq
	28, // 52: pb.filecenter.FindFileInfoInPublicByFileId:output_type -> pb.FindFileInfoInPublicByFileIdResp
	30, // 53: pb.filecenter.FindPublicFileByFileIdWithUserId:output_type -> pb.FindPublicFileByFileIdWithUserIdResp
	32, // 54: pb.filecenter.FindPublicByFileIdList:output_type -> pb.FindPublicByFileIdListResp
	34, // 55: pb.filecenter.CalPublicFileSize:output_type -> pb.CalPublicFileSizeResp
	36, // 56: pb.filecenter.FindPublicFileListByUserId:output_type -> pb.FindPublicFileListByUserIdResp
	38, // 57: pb.filecenter.FindPublicFileListByFatherId:output_type -> pb.FindPublicFileListByFatherIdResp
	40, // 58: pb.filecenter.FindAllPublicFileByFatherId:output_type -> pb.FindAllPublicFileByFatherIdResp
	42, // 59: pb.filecenter.FindFileBySharingCode:output_type -> pb.FindFileBySharingCodeResp
	48, // 60: pb.filecenter.UploadFile:output_type -> pb.UploadFileResp
	50, // 61: pb.filecenter.AskUploadFile:output_type -> pb.AskUploadFileResp
	50, // 62: pb.filecenter.AskUploadFileRollback:output_type -> pb.AskUploadFileResp
	44, // 63: pb.filecenter.DeleteExpiredFiles:output_type -> pb.DeleteExpiredFilesResp
	46, // 64: pb.filecenter.DeleteExpiredShareCodes:output_type -> pb.DeleteExpiredShareCodesResp
	40, // [40:65] is the sub-list for method output_type
	15, // [15:40] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_filecenter_proto_init() }
func file_filecenter_proto_init() {
	if File_filecenter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_filecenter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CosInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindCosInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindCosInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFileByMd5Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFileByMd5Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFileInfoByFileIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFileInfoByFileIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFileByFileIdWithUserIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFileByFileIdWithUserIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFileInfoByFileIdListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFileInfoByFileIdListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFileInfoByFileIdListWithUserIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFileInfoByFileIdListWithUserIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFileListByFatherIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFileListByFatherIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFileListByFatherIdWithUserIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFileListByFatherIdWithUserIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllFileByFatherIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllFileByFatherIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalFileSizeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalFileSizeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFileCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFileCountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFileTypeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFileTypeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFileInfoInPublicByFileIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFileInfoInPublicByFileIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindPublicFileByFileIdWithUserIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindPublicFileByFileIdWithUserIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindPublicByFileIdListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindPublicByFileIdListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalPublicFileSizeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalPublicFileSizeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindPublicFileListByUserIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindPublicFileListByUserIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindPublicFileListByFatherIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindPublicFileListByFatherIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllPublicFileByFatherIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllPublicFileByFatherIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFileBySharingCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFileBySharingCodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExpiredFilesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExpiredFilesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExpiredShareCodesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExpiredShareCodesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadFileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadFileResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AskUploadFileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecenter_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AskUploadFileResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_filecenter_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_filecenter_proto_msgTypes[33].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_filecenter_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   51,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_filecenter_proto_goTypes,
		DependencyIndexes: file_filecenter_proto_depIdxs,
		MessageInfos:      file_filecenter_proto_msgTypes,
	}.Build()
	File_filecenter_proto = out.File
	file_filecenter_proto_rawDesc = nil
	file_filecenter_proto_goTypes = nil
	file_filecenter_proto_depIdxs = nil
}
