// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: filecenter.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Filecenter_FindCosInfo_FullMethodName                        = "/pb.filecenter/FindCosInfo"
	Filecenter_FindFileByMd5_FullMethodName                      = "/pb.filecenter/FindFileByMd5"
	Filecenter_FindFileInfoByFileId_FullMethodName               = "/pb.filecenter/FindFileInfoByFileId"
	Filecenter_FindFileByFileIdWithUserId_FullMethodName         = "/pb.filecenter/FindFileByFileIdWithUserId"
	Filecenter_FindFileInfoByFileIdList_FullMethodName           = "/pb.filecenter/FindFileInfoByFileIdList"
	Filecenter_FindFileInfoByFileIdListWithUserId_FullMethodName = "/pb.filecenter/FindFileInfoByFileIdListWithUserId"
	Filecenter_FindFileListByFatherId_FullMethodName             = "/pb.filecenter/FindFileListByFatherId"
	Filecenter_FindFileListByFatherIdWithUserId_FullMethodName   = "/pb.filecenter/FindFileListByFatherIdWithUserId"
	Filecenter_FindAllFileByFatherId_FullMethodName              = "/pb.filecenter/FindAllFileByFatherId"
	Filecenter_CalFileSize_FullMethodName                        = "/pb.filecenter/CalFileSize"
	Filecenter_FindFileCount_FullMethodName                      = "/pb.filecenter/FindFileCount"
	Filecenter_FindFileType_FullMethodName                       = "/pb.filecenter/FindFileType"
	Filecenter_FindFileInfoInPublicByFileId_FullMethodName       = "/pb.filecenter/FindFileInfoInPublicByFileId"
	Filecenter_FindPublicFileByFileIdWithUserId_FullMethodName   = "/pb.filecenter/FindPublicFileByFileIdWithUserId"
	Filecenter_FindPublicByFileIdList_FullMethodName             = "/pb.filecenter/FindPublicByFileIdList"
	Filecenter_CalPublicFileSize_FullMethodName                  = "/pb.filecenter/CalPublicFileSize"
	Filecenter_FindPublicFileListByUserId_FullMethodName         = "/pb.filecenter/FindPublicFileListByUserId"
	Filecenter_FindPublicFileListByFatherId_FullMethodName       = "/pb.filecenter/FindPublicFileListByFatherId"
	Filecenter_FindAllPublicFileByFatherId_FullMethodName        = "/pb.filecenter/FindAllPublicFileByFatherId"
	Filecenter_FindFileBySharingCode_FullMethodName              = "/pb.filecenter/FindFileBySharingCode"
	Filecenter_UploadFile_FullMethodName                         = "/pb.filecenter/UploadFile"
	Filecenter_AskUploadFile_FullMethodName                      = "/pb.filecenter/AskUploadFile"
	Filecenter_AskUploadFileRollback_FullMethodName              = "/pb.filecenter/AskUploadFileRollback"
	Filecenter_DeleteExpiredFiles_FullMethodName                 = "/pb.filecenter/DeleteExpiredFiles"
	Filecenter_DeleteExpiredShareCodes_FullMethodName            = "/pb.filecenter/DeleteExpiredShareCodes"
)

// FilecenterClient is the client API for Filecenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilecenterClient interface {
	FindCosInfo(ctx context.Context, in *FindCosInfoReq, opts ...grpc.CallOption) (*FindCosInfoResp, error)
	FindFileByMd5(ctx context.Context, in *FindFileByMd5Req, opts ...grpc.CallOption) (*FindFileByMd5Resp, error)
	FindFileInfoByFileId(ctx context.Context, in *FindFileInfoByFileIdReq, opts ...grpc.CallOption) (*FindFileInfoByFileIdResp, error)
	FindFileByFileIdWithUserId(ctx context.Context, in *FindFileByFileIdWithUserIdReq, opts ...grpc.CallOption) (*FindFileByFileIdWithUserIdResp, error)
	FindFileInfoByFileIdList(ctx context.Context, in *FindFileInfoByFileIdListReq, opts ...grpc.CallOption) (*FindFileInfoByFileIdListResp, error)
	FindFileInfoByFileIdListWithUserId(ctx context.Context, in *FindFileInfoByFileIdListWithUserIdReq, opts ...grpc.CallOption) (*FindFileInfoByFileIdListWithUserIdResp, error)
	FindFileListByFatherId(ctx context.Context, in *FindFileListByFatherIdReq, opts ...grpc.CallOption) (*FindFileListByFatherIdResp, error)
	FindFileListByFatherIdWithUserId(ctx context.Context, in *FindFileListByFatherIdWithUserIdReq, opts ...grpc.CallOption) (*FindFileListByFatherIdWithUserIdResp, error)
	FindAllFileByFatherId(ctx context.Context, in *FindAllFileByFatherIdReq, opts ...grpc.CallOption) (*FindAllFileByFatherIdResp, error)
	CalFileSize(ctx context.Context, in *CalFileSizeReq, opts ...grpc.CallOption) (*CalFileSizeResp, error)
	FindFileCount(ctx context.Context, in *FindFileCountReq, opts ...grpc.CallOption) (*FindFileCountResp, error)
	FindFileType(ctx context.Context, in *FindFileTypeReq, opts ...grpc.CallOption) (*FindFileTypeReq, error)
	FindFileInfoInPublicByFileId(ctx context.Context, in *FindFileInfoInPublicByFileIdReq, opts ...grpc.CallOption) (*FindFileInfoInPublicByFileIdResp, error)
	FindPublicFileByFileIdWithUserId(ctx context.Context, in *FindPublicFileByFileIdWithUserIdReq, opts ...grpc.CallOption) (*FindPublicFileByFileIdWithUserIdResp, error)
	FindPublicByFileIdList(ctx context.Context, in *FindPublicByFileIdListReq, opts ...grpc.CallOption) (*FindPublicByFileIdListResp, error)
	CalPublicFileSize(ctx context.Context, in *CalPublicFileSizeReq, opts ...grpc.CallOption) (*CalPublicFileSizeResp, error)
	FindPublicFileListByUserId(ctx context.Context, in *FindPublicFileListByUserIdReq, opts ...grpc.CallOption) (*FindPublicFileListByUserIdResp, error)
	FindPublicFileListByFatherId(ctx context.Context, in *FindPublicFileListByFatherIdReq, opts ...grpc.CallOption) (*FindPublicFileListByFatherIdResp, error)
	FindAllPublicFileByFatherId(ctx context.Context, in *FindAllPublicFileByFatherIdReq, opts ...grpc.CallOption) (*FindAllPublicFileByFatherIdResp, error)
	FindFileBySharingCode(ctx context.Context, in *FindFileBySharingCodeReq, opts ...grpc.CallOption) (*FindFileBySharingCodeResp, error)
	UploadFile(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadFileResp, error)
	AskUploadFile(ctx context.Context, in *AskUploadFileReq, opts ...grpc.CallOption) (*AskUploadFileResp, error)
	AskUploadFileRollback(ctx context.Context, in *AskUploadFileReq, opts ...grpc.CallOption) (*AskUploadFileResp, error)
	DeleteExpiredFiles(ctx context.Context, in *DeleteExpiredFilesReq, opts ...grpc.CallOption) (*DeleteExpiredFilesResp, error)
	DeleteExpiredShareCodes(ctx context.Context, in *DeleteExpiredShareCodesReq, opts ...grpc.CallOption) (*DeleteExpiredShareCodesResp, error)
}

type filecenterClient struct {
	cc grpc.ClientConnInterface
}

func NewFilecenterClient(cc grpc.ClientConnInterface) FilecenterClient {
	return &filecenterClient{cc}
}

func (c *filecenterClient) FindCosInfo(ctx context.Context, in *FindCosInfoReq, opts ...grpc.CallOption) (*FindCosInfoResp, error) {
	out := new(FindCosInfoResp)
	err := c.cc.Invoke(ctx, Filecenter_FindCosInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FindFileByMd5(ctx context.Context, in *FindFileByMd5Req, opts ...grpc.CallOption) (*FindFileByMd5Resp, error) {
	out := new(FindFileByMd5Resp)
	err := c.cc.Invoke(ctx, Filecenter_FindFileByMd5_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FindFileInfoByFileId(ctx context.Context, in *FindFileInfoByFileIdReq, opts ...grpc.CallOption) (*FindFileInfoByFileIdResp, error) {
	out := new(FindFileInfoByFileIdResp)
	err := c.cc.Invoke(ctx, Filecenter_FindFileInfoByFileId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FindFileByFileIdWithUserId(ctx context.Context, in *FindFileByFileIdWithUserIdReq, opts ...grpc.CallOption) (*FindFileByFileIdWithUserIdResp, error) {
	out := new(FindFileByFileIdWithUserIdResp)
	err := c.cc.Invoke(ctx, Filecenter_FindFileByFileIdWithUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FindFileInfoByFileIdList(ctx context.Context, in *FindFileInfoByFileIdListReq, opts ...grpc.CallOption) (*FindFileInfoByFileIdListResp, error) {
	out := new(FindFileInfoByFileIdListResp)
	err := c.cc.Invoke(ctx, Filecenter_FindFileInfoByFileIdList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FindFileInfoByFileIdListWithUserId(ctx context.Context, in *FindFileInfoByFileIdListWithUserIdReq, opts ...grpc.CallOption) (*FindFileInfoByFileIdListWithUserIdResp, error) {
	out := new(FindFileInfoByFileIdListWithUserIdResp)
	err := c.cc.Invoke(ctx, Filecenter_FindFileInfoByFileIdListWithUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FindFileListByFatherId(ctx context.Context, in *FindFileListByFatherIdReq, opts ...grpc.CallOption) (*FindFileListByFatherIdResp, error) {
	out := new(FindFileListByFatherIdResp)
	err := c.cc.Invoke(ctx, Filecenter_FindFileListByFatherId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FindFileListByFatherIdWithUserId(ctx context.Context, in *FindFileListByFatherIdWithUserIdReq, opts ...grpc.CallOption) (*FindFileListByFatherIdWithUserIdResp, error) {
	out := new(FindFileListByFatherIdWithUserIdResp)
	err := c.cc.Invoke(ctx, Filecenter_FindFileListByFatherIdWithUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FindAllFileByFatherId(ctx context.Context, in *FindAllFileByFatherIdReq, opts ...grpc.CallOption) (*FindAllFileByFatherIdResp, error) {
	out := new(FindAllFileByFatherIdResp)
	err := c.cc.Invoke(ctx, Filecenter_FindAllFileByFatherId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) CalFileSize(ctx context.Context, in *CalFileSizeReq, opts ...grpc.CallOption) (*CalFileSizeResp, error) {
	out := new(CalFileSizeResp)
	err := c.cc.Invoke(ctx, Filecenter_CalFileSize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FindFileCount(ctx context.Context, in *FindFileCountReq, opts ...grpc.CallOption) (*FindFileCountResp, error) {
	out := new(FindFileCountResp)
	err := c.cc.Invoke(ctx, Filecenter_FindFileCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FindFileType(ctx context.Context, in *FindFileTypeReq, opts ...grpc.CallOption) (*FindFileTypeReq, error) {
	out := new(FindFileTypeReq)
	err := c.cc.Invoke(ctx, Filecenter_FindFileType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FindFileInfoInPublicByFileId(ctx context.Context, in *FindFileInfoInPublicByFileIdReq, opts ...grpc.CallOption) (*FindFileInfoInPublicByFileIdResp, error) {
	out := new(FindFileInfoInPublicByFileIdResp)
	err := c.cc.Invoke(ctx, Filecenter_FindFileInfoInPublicByFileId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FindPublicFileByFileIdWithUserId(ctx context.Context, in *FindPublicFileByFileIdWithUserIdReq, opts ...grpc.CallOption) (*FindPublicFileByFileIdWithUserIdResp, error) {
	out := new(FindPublicFileByFileIdWithUserIdResp)
	err := c.cc.Invoke(ctx, Filecenter_FindPublicFileByFileIdWithUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FindPublicByFileIdList(ctx context.Context, in *FindPublicByFileIdListReq, opts ...grpc.CallOption) (*FindPublicByFileIdListResp, error) {
	out := new(FindPublicByFileIdListResp)
	err := c.cc.Invoke(ctx, Filecenter_FindPublicByFileIdList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) CalPublicFileSize(ctx context.Context, in *CalPublicFileSizeReq, opts ...grpc.CallOption) (*CalPublicFileSizeResp, error) {
	out := new(CalPublicFileSizeResp)
	err := c.cc.Invoke(ctx, Filecenter_CalPublicFileSize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FindPublicFileListByUserId(ctx context.Context, in *FindPublicFileListByUserIdReq, opts ...grpc.CallOption) (*FindPublicFileListByUserIdResp, error) {
	out := new(FindPublicFileListByUserIdResp)
	err := c.cc.Invoke(ctx, Filecenter_FindPublicFileListByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FindPublicFileListByFatherId(ctx context.Context, in *FindPublicFileListByFatherIdReq, opts ...grpc.CallOption) (*FindPublicFileListByFatherIdResp, error) {
	out := new(FindPublicFileListByFatherIdResp)
	err := c.cc.Invoke(ctx, Filecenter_FindPublicFileListByFatherId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FindAllPublicFileByFatherId(ctx context.Context, in *FindAllPublicFileByFatherIdReq, opts ...grpc.CallOption) (*FindAllPublicFileByFatherIdResp, error) {
	out := new(FindAllPublicFileByFatherIdResp)
	err := c.cc.Invoke(ctx, Filecenter_FindAllPublicFileByFatherId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FindFileBySharingCode(ctx context.Context, in *FindFileBySharingCodeReq, opts ...grpc.CallOption) (*FindFileBySharingCodeResp, error) {
	out := new(FindFileBySharingCodeResp)
	err := c.cc.Invoke(ctx, Filecenter_FindFileBySharingCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) UploadFile(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadFileResp, error) {
	out := new(UploadFileResp)
	err := c.cc.Invoke(ctx, Filecenter_UploadFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) AskUploadFile(ctx context.Context, in *AskUploadFileReq, opts ...grpc.CallOption) (*AskUploadFileResp, error) {
	out := new(AskUploadFileResp)
	err := c.cc.Invoke(ctx, Filecenter_AskUploadFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) AskUploadFileRollback(ctx context.Context, in *AskUploadFileReq, opts ...grpc.CallOption) (*AskUploadFileResp, error) {
	out := new(AskUploadFileResp)
	err := c.cc.Invoke(ctx, Filecenter_AskUploadFileRollback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) DeleteExpiredFiles(ctx context.Context, in *DeleteExpiredFilesReq, opts ...grpc.CallOption) (*DeleteExpiredFilesResp, error) {
	out := new(DeleteExpiredFilesResp)
	err := c.cc.Invoke(ctx, Filecenter_DeleteExpiredFiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) DeleteExpiredShareCodes(ctx context.Context, in *DeleteExpiredShareCodesReq, opts ...grpc.CallOption) (*DeleteExpiredShareCodesResp, error) {
	out := new(DeleteExpiredShareCodesResp)
	err := c.cc.Invoke(ctx, Filecenter_DeleteExpiredShareCodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilecenterServer is the server API for Filecenter service.
// All implementations must embed UnimplementedFilecenterServer
// for forward compatibility
type FilecenterServer interface {
	FindCosInfo(context.Context, *FindCosInfoReq) (*FindCosInfoResp, error)
	FindFileByMd5(context.Context, *FindFileByMd5Req) (*FindFileByMd5Resp, error)
	FindFileInfoByFileId(context.Context, *FindFileInfoByFileIdReq) (*FindFileInfoByFileIdResp, error)
	FindFileByFileIdWithUserId(context.Context, *FindFileByFileIdWithUserIdReq) (*FindFileByFileIdWithUserIdResp, error)
	FindFileInfoByFileIdList(context.Context, *FindFileInfoByFileIdListReq) (*FindFileInfoByFileIdListResp, error)
	FindFileInfoByFileIdListWithUserId(context.Context, *FindFileInfoByFileIdListWithUserIdReq) (*FindFileInfoByFileIdListWithUserIdResp, error)
	FindFileListByFatherId(context.Context, *FindFileListByFatherIdReq) (*FindFileListByFatherIdResp, error)
	FindFileListByFatherIdWithUserId(context.Context, *FindFileListByFatherIdWithUserIdReq) (*FindFileListByFatherIdWithUserIdResp, error)
	FindAllFileByFatherId(context.Context, *FindAllFileByFatherIdReq) (*FindAllFileByFatherIdResp, error)
	CalFileSize(context.Context, *CalFileSizeReq) (*CalFileSizeResp, error)
	FindFileCount(context.Context, *FindFileCountReq) (*FindFileCountResp, error)
	FindFileType(context.Context, *FindFileTypeReq) (*FindFileTypeReq, error)
	FindFileInfoInPublicByFileId(context.Context, *FindFileInfoInPublicByFileIdReq) (*FindFileInfoInPublicByFileIdResp, error)
	FindPublicFileByFileIdWithUserId(context.Context, *FindPublicFileByFileIdWithUserIdReq) (*FindPublicFileByFileIdWithUserIdResp, error)
	FindPublicByFileIdList(context.Context, *FindPublicByFileIdListReq) (*FindPublicByFileIdListResp, error)
	CalPublicFileSize(context.Context, *CalPublicFileSizeReq) (*CalPublicFileSizeResp, error)
	FindPublicFileListByUserId(context.Context, *FindPublicFileListByUserIdReq) (*FindPublicFileListByUserIdResp, error)
	FindPublicFileListByFatherId(context.Context, *FindPublicFileListByFatherIdReq) (*FindPublicFileListByFatherIdResp, error)
	FindAllPublicFileByFatherId(context.Context, *FindAllPublicFileByFatherIdReq) (*FindAllPublicFileByFatherIdResp, error)
	FindFileBySharingCode(context.Context, *FindFileBySharingCodeReq) (*FindFileBySharingCodeResp, error)
	UploadFile(context.Context, *UploadFileReq) (*UploadFileResp, error)
	AskUploadFile(context.Context, *AskUploadFileReq) (*AskUploadFileResp, error)
	AskUploadFileRollback(context.Context, *AskUploadFileReq) (*AskUploadFileResp, error)
	DeleteExpiredFiles(context.Context, *DeleteExpiredFilesReq) (*DeleteExpiredFilesResp, error)
	DeleteExpiredShareCodes(context.Context, *DeleteExpiredShareCodesReq) (*DeleteExpiredShareCodesResp, error)
	mustEmbedUnimplementedFilecenterServer()
}

// UnimplementedFilecenterServer must be embedded to have forward compatible implementations.
type UnimplementedFilecenterServer struct {
}

func (UnimplementedFilecenterServer) FindCosInfo(context.Context, *FindCosInfoReq) (*FindCosInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCosInfo not implemented")
}
func (UnimplementedFilecenterServer) FindFileByMd5(context.Context, *FindFileByMd5Req) (*FindFileByMd5Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFileByMd5 not implemented")
}
func (UnimplementedFilecenterServer) FindFileInfoByFileId(context.Context, *FindFileInfoByFileIdReq) (*FindFileInfoByFileIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFileInfoByFileId not implemented")
}
func (UnimplementedFilecenterServer) FindFileByFileIdWithUserId(context.Context, *FindFileByFileIdWithUserIdReq) (*FindFileByFileIdWithUserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFileByFileIdWithUserId not implemented")
}
func (UnimplementedFilecenterServer) FindFileInfoByFileIdList(context.Context, *FindFileInfoByFileIdListReq) (*FindFileInfoByFileIdListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFileInfoByFileIdList not implemented")
}
func (UnimplementedFilecenterServer) FindFileInfoByFileIdListWithUserId(context.Context, *FindFileInfoByFileIdListWithUserIdReq) (*FindFileInfoByFileIdListWithUserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFileInfoByFileIdListWithUserId not implemented")
}
func (UnimplementedFilecenterServer) FindFileListByFatherId(context.Context, *FindFileListByFatherIdReq) (*FindFileListByFatherIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFileListByFatherId not implemented")
}
func (UnimplementedFilecenterServer) FindFileListByFatherIdWithUserId(context.Context, *FindFileListByFatherIdWithUserIdReq) (*FindFileListByFatherIdWithUserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFileListByFatherIdWithUserId not implemented")
}
func (UnimplementedFilecenterServer) FindAllFileByFatherId(context.Context, *FindAllFileByFatherIdReq) (*FindAllFileByFatherIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllFileByFatherId not implemented")
}
func (UnimplementedFilecenterServer) CalFileSize(context.Context, *CalFileSizeReq) (*CalFileSizeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalFileSize not implemented")
}
func (UnimplementedFilecenterServer) FindFileCount(context.Context, *FindFileCountReq) (*FindFileCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFileCount not implemented")
}
func (UnimplementedFilecenterServer) FindFileType(context.Context, *FindFileTypeReq) (*FindFileTypeReq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFileType not implemented")
}
func (UnimplementedFilecenterServer) FindFileInfoInPublicByFileId(context.Context, *FindFileInfoInPublicByFileIdReq) (*FindFileInfoInPublicByFileIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFileInfoInPublicByFileId not implemented")
}
func (UnimplementedFilecenterServer) FindPublicFileByFileIdWithUserId(context.Context, *FindPublicFileByFileIdWithUserIdReq) (*FindPublicFileByFileIdWithUserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPublicFileByFileIdWithUserId not implemented")
}
func (UnimplementedFilecenterServer) FindPublicByFileIdList(context.Context, *FindPublicByFileIdListReq) (*FindPublicByFileIdListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPublicByFileIdList not implemented")
}
func (UnimplementedFilecenterServer) CalPublicFileSize(context.Context, *CalPublicFileSizeReq) (*CalPublicFileSizeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalPublicFileSize not implemented")
}
func (UnimplementedFilecenterServer) FindPublicFileListByUserId(context.Context, *FindPublicFileListByUserIdReq) (*FindPublicFileListByUserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPublicFileListByUserId not implemented")
}
func (UnimplementedFilecenterServer) FindPublicFileListByFatherId(context.Context, *FindPublicFileListByFatherIdReq) (*FindPublicFileListByFatherIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPublicFileListByFatherId not implemented")
}
func (UnimplementedFilecenterServer) FindAllPublicFileByFatherId(context.Context, *FindAllPublicFileByFatherIdReq) (*FindAllPublicFileByFatherIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllPublicFileByFatherId not implemented")
}
func (UnimplementedFilecenterServer) FindFileBySharingCode(context.Context, *FindFileBySharingCodeReq) (*FindFileBySharingCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFileBySharingCode not implemented")
}
func (UnimplementedFilecenterServer) UploadFile(context.Context, *UploadFileReq) (*UploadFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFilecenterServer) AskUploadFile(context.Context, *AskUploadFileReq) (*AskUploadFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskUploadFile not implemented")
}
func (UnimplementedFilecenterServer) AskUploadFileRollback(context.Context, *AskUploadFileReq) (*AskUploadFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskUploadFileRollback not implemented")
}
func (UnimplementedFilecenterServer) DeleteExpiredFiles(context.Context, *DeleteExpiredFilesReq) (*DeleteExpiredFilesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExpiredFiles not implemented")
}
func (UnimplementedFilecenterServer) DeleteExpiredShareCodes(context.Context, *DeleteExpiredShareCodesReq) (*DeleteExpiredShareCodesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExpiredShareCodes not implemented")
}
func (UnimplementedFilecenterServer) mustEmbedUnimplementedFilecenterServer() {}

// UnsafeFilecenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilecenterServer will
// result in compilation errors.
type UnsafeFilecenterServer interface {
	mustEmbedUnimplementedFilecenterServer()
}

func RegisterFilecenterServer(s grpc.ServiceRegistrar, srv FilecenterServer) {
	s.RegisterService(&Filecenter_ServiceDesc, srv)
}

func _Filecenter_FindCosInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCosInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FindCosInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FindCosInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FindCosInfo(ctx, req.(*FindCosInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FindFileByMd5_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindFileByMd5Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FindFileByMd5(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FindFileByMd5_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FindFileByMd5(ctx, req.(*FindFileByMd5Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FindFileInfoByFileId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindFileInfoByFileIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FindFileInfoByFileId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FindFileInfoByFileId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FindFileInfoByFileId(ctx, req.(*FindFileInfoByFileIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FindFileByFileIdWithUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindFileByFileIdWithUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FindFileByFileIdWithUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FindFileByFileIdWithUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FindFileByFileIdWithUserId(ctx, req.(*FindFileByFileIdWithUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FindFileInfoByFileIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindFileInfoByFileIdListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FindFileInfoByFileIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FindFileInfoByFileIdList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FindFileInfoByFileIdList(ctx, req.(*FindFileInfoByFileIdListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FindFileInfoByFileIdListWithUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindFileInfoByFileIdListWithUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FindFileInfoByFileIdListWithUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FindFileInfoByFileIdListWithUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FindFileInfoByFileIdListWithUserId(ctx, req.(*FindFileInfoByFileIdListWithUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FindFileListByFatherId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindFileListByFatherIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FindFileListByFatherId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FindFileListByFatherId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FindFileListByFatherId(ctx, req.(*FindFileListByFatherIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FindFileListByFatherIdWithUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindFileListByFatherIdWithUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FindFileListByFatherIdWithUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FindFileListByFatherIdWithUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FindFileListByFatherIdWithUserId(ctx, req.(*FindFileListByFatherIdWithUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FindAllFileByFatherId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllFileByFatherIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FindAllFileByFatherId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FindAllFileByFatherId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FindAllFileByFatherId(ctx, req.(*FindAllFileByFatherIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_CalFileSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalFileSizeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).CalFileSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_CalFileSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).CalFileSize(ctx, req.(*CalFileSizeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FindFileCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindFileCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FindFileCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FindFileCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FindFileCount(ctx, req.(*FindFileCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FindFileType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindFileTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FindFileType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FindFileType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FindFileType(ctx, req.(*FindFileTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FindFileInfoInPublicByFileId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindFileInfoInPublicByFileIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FindFileInfoInPublicByFileId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FindFileInfoInPublicByFileId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FindFileInfoInPublicByFileId(ctx, req.(*FindFileInfoInPublicByFileIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FindPublicFileByFileIdWithUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPublicFileByFileIdWithUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FindPublicFileByFileIdWithUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FindPublicFileByFileIdWithUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FindPublicFileByFileIdWithUserId(ctx, req.(*FindPublicFileByFileIdWithUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FindPublicByFileIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPublicByFileIdListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FindPublicByFileIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FindPublicByFileIdList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FindPublicByFileIdList(ctx, req.(*FindPublicByFileIdListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_CalPublicFileSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalPublicFileSizeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).CalPublicFileSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_CalPublicFileSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).CalPublicFileSize(ctx, req.(*CalPublicFileSizeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FindPublicFileListByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPublicFileListByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FindPublicFileListByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FindPublicFileListByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FindPublicFileListByUserId(ctx, req.(*FindPublicFileListByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FindPublicFileListByFatherId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPublicFileListByFatherIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FindPublicFileListByFatherId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FindPublicFileListByFatherId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FindPublicFileListByFatherId(ctx, req.(*FindPublicFileListByFatherIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FindAllPublicFileByFatherId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllPublicFileByFatherIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FindAllPublicFileByFatherId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FindAllPublicFileByFatherId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FindAllPublicFileByFatherId(ctx, req.(*FindAllPublicFileByFatherIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FindFileBySharingCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindFileBySharingCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FindFileBySharingCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FindFileBySharingCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FindFileBySharingCode(ctx, req.(*FindFileBySharingCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_UploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).UploadFile(ctx, req.(*UploadFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_AskUploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskUploadFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).AskUploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_AskUploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).AskUploadFile(ctx, req.(*AskUploadFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_AskUploadFileRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskUploadFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).AskUploadFileRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_AskUploadFileRollback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).AskUploadFileRollback(ctx, req.(*AskUploadFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_DeleteExpiredFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExpiredFilesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).DeleteExpiredFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_DeleteExpiredFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).DeleteExpiredFiles(ctx, req.(*DeleteExpiredFilesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_DeleteExpiredShareCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExpiredShareCodesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).DeleteExpiredShareCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_DeleteExpiredShareCodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).DeleteExpiredShareCodes(ctx, req.(*DeleteExpiredShareCodesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Filecenter_ServiceDesc is the grpc.ServiceDesc for Filecenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Filecenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.filecenter",
	HandlerType: (*FilecenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindCosInfo",
			Handler:    _Filecenter_FindCosInfo_Handler,
		},
		{
			MethodName: "FindFileByMd5",
			Handler:    _Filecenter_FindFileByMd5_Handler,
		},
		{
			MethodName: "FindFileInfoByFileId",
			Handler:    _Filecenter_FindFileInfoByFileId_Handler,
		},
		{
			MethodName: "FindFileByFileIdWithUserId",
			Handler:    _Filecenter_FindFileByFileIdWithUserId_Handler,
		},
		{
			MethodName: "FindFileInfoByFileIdList",
			Handler:    _Filecenter_FindFileInfoByFileIdList_Handler,
		},
		{
			MethodName: "FindFileInfoByFileIdListWithUserId",
			Handler:    _Filecenter_FindFileInfoByFileIdListWithUserId_Handler,
		},
		{
			MethodName: "FindFileListByFatherId",
			Handler:    _Filecenter_FindFileListByFatherId_Handler,
		},
		{
			MethodName: "FindFileListByFatherIdWithUserId",
			Handler:    _Filecenter_FindFileListByFatherIdWithUserId_Handler,
		},
		{
			MethodName: "FindAllFileByFatherId",
			Handler:    _Filecenter_FindAllFileByFatherId_Handler,
		},
		{
			MethodName: "CalFileSize",
			Handler:    _Filecenter_CalFileSize_Handler,
		},
		{
			MethodName: "FindFileCount",
			Handler:    _Filecenter_FindFileCount_Handler,
		},
		{
			MethodName: "FindFileType",
			Handler:    _Filecenter_FindFileType_Handler,
		},
		{
			MethodName: "FindFileInfoInPublicByFileId",
			Handler:    _Filecenter_FindFileInfoInPublicByFileId_Handler,
		},
		{
			MethodName: "FindPublicFileByFileIdWithUserId",
			Handler:    _Filecenter_FindPublicFileByFileIdWithUserId_Handler,
		},
		{
			MethodName: "FindPublicByFileIdList",
			Handler:    _Filecenter_FindPublicByFileIdList_Handler,
		},
		{
			MethodName: "CalPublicFileSize",
			Handler:    _Filecenter_CalPublicFileSize_Handler,
		},
		{
			MethodName: "FindPublicFileListByUserId",
			Handler:    _Filecenter_FindPublicFileListByUserId_Handler,
		},
		{
			MethodName: "FindPublicFileListByFatherId",
			Handler:    _Filecenter_FindPublicFileListByFatherId_Handler,
		},
		{
			MethodName: "FindAllPublicFileByFatherId",
			Handler:    _Filecenter_FindAllPublicFileByFatherId_Handler,
		},
		{
			MethodName: "FindFileBySharingCode",
			Handler:    _Filecenter_FindFileBySharingCode_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _Filecenter_UploadFile_Handler,
		},
		{
			MethodName: "AskUploadFile",
			Handler:    _Filecenter_AskUploadFile_Handler,
		},
		{
			MethodName: "AskUploadFileRollback",
			Handler:    _Filecenter_AskUploadFileRollback_Handler,
		},
		{
			MethodName: "DeleteExpiredFiles",
			Handler:    _Filecenter_DeleteExpiredFiles_Handler,
		},
		{
			MethodName: "DeleteExpiredShareCodes",
			Handler:    _Filecenter_DeleteExpiredShareCodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "filecenter.proto",
}
