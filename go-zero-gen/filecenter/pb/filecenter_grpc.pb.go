// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: filecenter.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Filecenter_FindOssInfo_FullMethodName                  = "/pb.filecenter/FindOssInfo"
	Filecenter_FindFileInfoInPublicByFileId_FullMethodName = "/pb.filecenter/FindFileInfoInPublicByFileId"
	Filecenter_FindFileInfoByFileId_FullMethodName         = "/pb.filecenter/FindFileInfoByFileId"
	Filecenter_DeleteExpiredFiles_FullMethodName           = "/pb.filecenter/DeleteExpiredFiles"
	Filecenter_DeleteExpiredShareCodes_FullMethodName      = "/pb.filecenter/DeleteExpiredShareCodes"
	Filecenter_UploadFile_FullMethodName                   = "/pb.filecenter/UploadFile"
	Filecenter_AskUploadFile_FullMethodName                = "/pb.filecenter/AskUploadFile"
	Filecenter_AskUploadFileRollback_FullMethodName        = "/pb.filecenter/AskUploadFileRollback"
)

// FilecenterClient is the client API for Filecenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilecenterClient interface {
	FindOssInfo(ctx context.Context, in *FindOssInfoReq, opts ...grpc.CallOption) (*FindOssInfoResp, error)
	FindFileInfoInPublicByFileId(ctx context.Context, in *FindFileInfoInPublicByFileIdReq, opts ...grpc.CallOption) (*FindFileInfoInPublicByFileIdResp, error)
	FindFileInfoByFileId(ctx context.Context, in *FindFileInfoByFileIdReq, opts ...grpc.CallOption) (*FindFileInfoByFileIdResp, error)
	DeleteExpiredFiles(ctx context.Context, in *DeleteExpiredFilesReq, opts ...grpc.CallOption) (*DeleteExpiredFilesResp, error)
	DeleteExpiredShareCodes(ctx context.Context, in *DeleteExpiredShareCodesReq, opts ...grpc.CallOption) (*DeleteExpiredShareCodesResp, error)
	UploadFile(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadFileResp, error)
	AskUploadFile(ctx context.Context, in *AskUploadFileReq, opts ...grpc.CallOption) (*AskUploadFileResp, error)
	AskUploadFileRollback(ctx context.Context, in *AskUploadFileReq, opts ...grpc.CallOption) (*AskUploadFileResp, error)
}

type filecenterClient struct {
	cc grpc.ClientConnInterface
}

func NewFilecenterClient(cc grpc.ClientConnInterface) FilecenterClient {
	return &filecenterClient{cc}
}

func (c *filecenterClient) FindOssInfo(ctx context.Context, in *FindOssInfoReq, opts ...grpc.CallOption) (*FindOssInfoResp, error) {
	out := new(FindOssInfoResp)
	err := c.cc.Invoke(ctx, Filecenter_FindOssInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FindFileInfoInPublicByFileId(ctx context.Context, in *FindFileInfoInPublicByFileIdReq, opts ...grpc.CallOption) (*FindFileInfoInPublicByFileIdResp, error) {
	out := new(FindFileInfoInPublicByFileIdResp)
	err := c.cc.Invoke(ctx, Filecenter_FindFileInfoInPublicByFileId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FindFileInfoByFileId(ctx context.Context, in *FindFileInfoByFileIdReq, opts ...grpc.CallOption) (*FindFileInfoByFileIdResp, error) {
	out := new(FindFileInfoByFileIdResp)
	err := c.cc.Invoke(ctx, Filecenter_FindFileInfoByFileId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) DeleteExpiredFiles(ctx context.Context, in *DeleteExpiredFilesReq, opts ...grpc.CallOption) (*DeleteExpiredFilesResp, error) {
	out := new(DeleteExpiredFilesResp)
	err := c.cc.Invoke(ctx, Filecenter_DeleteExpiredFiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) DeleteExpiredShareCodes(ctx context.Context, in *DeleteExpiredShareCodesReq, opts ...grpc.CallOption) (*DeleteExpiredShareCodesResp, error) {
	out := new(DeleteExpiredShareCodesResp)
	err := c.cc.Invoke(ctx, Filecenter_DeleteExpiredShareCodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) UploadFile(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadFileResp, error) {
	out := new(UploadFileResp)
	err := c.cc.Invoke(ctx, Filecenter_UploadFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) AskUploadFile(ctx context.Context, in *AskUploadFileReq, opts ...grpc.CallOption) (*AskUploadFileResp, error) {
	out := new(AskUploadFileResp)
	err := c.cc.Invoke(ctx, Filecenter_AskUploadFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) AskUploadFileRollback(ctx context.Context, in *AskUploadFileReq, opts ...grpc.CallOption) (*AskUploadFileResp, error) {
	out := new(AskUploadFileResp)
	err := c.cc.Invoke(ctx, Filecenter_AskUploadFileRollback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilecenterServer is the server API for Filecenter service.
// All implementations must embed UnimplementedFilecenterServer
// for forward compatibility
type FilecenterServer interface {
	FindOssInfo(context.Context, *FindOssInfoReq) (*FindOssInfoResp, error)
	FindFileInfoInPublicByFileId(context.Context, *FindFileInfoInPublicByFileIdReq) (*FindFileInfoInPublicByFileIdResp, error)
	FindFileInfoByFileId(context.Context, *FindFileInfoByFileIdReq) (*FindFileInfoByFileIdResp, error)
	DeleteExpiredFiles(context.Context, *DeleteExpiredFilesReq) (*DeleteExpiredFilesResp, error)
	DeleteExpiredShareCodes(context.Context, *DeleteExpiredShareCodesReq) (*DeleteExpiredShareCodesResp, error)
	UploadFile(context.Context, *UploadFileReq) (*UploadFileResp, error)
	AskUploadFile(context.Context, *AskUploadFileReq) (*AskUploadFileResp, error)
	AskUploadFileRollback(context.Context, *AskUploadFileReq) (*AskUploadFileResp, error)
	mustEmbedUnimplementedFilecenterServer()
}

// UnimplementedFilecenterServer must be embedded to have forward compatible implementations.
type UnimplementedFilecenterServer struct {
}

func (UnimplementedFilecenterServer) FindOssInfo(context.Context, *FindOssInfoReq) (*FindOssInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOssInfo not implemented")
}
func (UnimplementedFilecenterServer) FindFileInfoInPublicByFileId(context.Context, *FindFileInfoInPublicByFileIdReq) (*FindFileInfoInPublicByFileIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFileInfoInPublicByFileId not implemented")
}
func (UnimplementedFilecenterServer) FindFileInfoByFileId(context.Context, *FindFileInfoByFileIdReq) (*FindFileInfoByFileIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFileInfoByFileId not implemented")
}
func (UnimplementedFilecenterServer) DeleteExpiredFiles(context.Context, *DeleteExpiredFilesReq) (*DeleteExpiredFilesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExpiredFiles not implemented")
}
func (UnimplementedFilecenterServer) DeleteExpiredShareCodes(context.Context, *DeleteExpiredShareCodesReq) (*DeleteExpiredShareCodesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExpiredShareCodes not implemented")
}
func (UnimplementedFilecenterServer) UploadFile(context.Context, *UploadFileReq) (*UploadFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFilecenterServer) AskUploadFile(context.Context, *AskUploadFileReq) (*AskUploadFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskUploadFile not implemented")
}
func (UnimplementedFilecenterServer) AskUploadFileRollback(context.Context, *AskUploadFileReq) (*AskUploadFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskUploadFileRollback not implemented")
}
func (UnimplementedFilecenterServer) mustEmbedUnimplementedFilecenterServer() {}

// UnsafeFilecenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilecenterServer will
// result in compilation errors.
type UnsafeFilecenterServer interface {
	mustEmbedUnimplementedFilecenterServer()
}

func RegisterFilecenterServer(s grpc.ServiceRegistrar, srv FilecenterServer) {
	s.RegisterService(&Filecenter_ServiceDesc, srv)
}

func _Filecenter_FindOssInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOssInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FindOssInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FindOssInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FindOssInfo(ctx, req.(*FindOssInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FindFileInfoInPublicByFileId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindFileInfoInPublicByFileIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FindFileInfoInPublicByFileId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FindFileInfoInPublicByFileId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FindFileInfoInPublicByFileId(ctx, req.(*FindFileInfoInPublicByFileIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FindFileInfoByFileId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindFileInfoByFileIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FindFileInfoByFileId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FindFileInfoByFileId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FindFileInfoByFileId(ctx, req.(*FindFileInfoByFileIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_DeleteExpiredFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExpiredFilesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).DeleteExpiredFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_DeleteExpiredFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).DeleteExpiredFiles(ctx, req.(*DeleteExpiredFilesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_DeleteExpiredShareCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExpiredShareCodesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).DeleteExpiredShareCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_DeleteExpiredShareCodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).DeleteExpiredShareCodes(ctx, req.(*DeleteExpiredShareCodesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_UploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).UploadFile(ctx, req.(*UploadFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_AskUploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskUploadFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).AskUploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_AskUploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).AskUploadFile(ctx, req.(*AskUploadFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_AskUploadFileRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskUploadFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).AskUploadFileRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_AskUploadFileRollback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).AskUploadFileRollback(ctx, req.(*AskUploadFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Filecenter_ServiceDesc is the grpc.ServiceDesc for Filecenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Filecenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.filecenter",
	HandlerType: (*FilecenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindOssInfo",
			Handler:    _Filecenter_FindOssInfo_Handler,
		},
		{
			MethodName: "FindFileInfoInPublicByFileId",
			Handler:    _Filecenter_FindFileInfoInPublicByFileId_Handler,
		},
		{
			MethodName: "FindFileInfoByFileId",
			Handler:    _Filecenter_FindFileInfoByFileId_Handler,
		},
		{
			MethodName: "DeleteExpiredFiles",
			Handler:    _Filecenter_DeleteExpiredFiles_Handler,
		},
		{
			MethodName: "DeleteExpiredShareCodes",
			Handler:    _Filecenter_DeleteExpiredShareCodes_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _Filecenter_UploadFile_Handler,
		},
		{
			MethodName: "AskUploadFile",
			Handler:    _Filecenter_AskUploadFile_Handler,
		},
		{
			MethodName: "AskUploadFileRollback",
			Handler:    _Filecenter_AskUploadFileRollback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "filecenter.proto",
}
