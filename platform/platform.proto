syntax = "proto3";
package platform;
option go_package = "platform";

import "platform/common.proto";
import "basic/pagination.proto";

message CreateCommentReq {
  string subjectId = 1;
  string rootId = 2;
  string fatherId = 3;
  repeated string labelIds = 4; // 标签id列表：作者点赞，作者回复等
  string userId = 5; // 评论者
  string atUserId = 6; // @谁
  string content = 7; // 内容
  string meta = 8; // 皮肤，字体等
}

message CreateCommentResp {
  string commentId = 1;
}

message GetCommentReq {
  string commentId = 1;
}

message GetCommentResp {
  string subjectId = 1;
  string rootId = 2;
  string fatherId = 3;
  int64 count = 4; // 回复数
  int64 state = 5; // 1: 正常, 2: 删除
  int64 attrs = 6; // 1: 无, 2: 置顶, 3: 精华, 4: 置顶+精华
  repeated string labelIds = 7; // 标签：作者点赞，作者回复等
  string userId = 8; // 评论者
  string atUserId = 9; // @谁
  string content = 10; // 内容
  string meta = 11; // 皮肤，字体等
  int64 createTime = 12;
}

message GetCommentListReq {
  optional CommentFilterOptions filterOptions = 1;
  optional basic.PaginationOptions pagination = 2;
}

message GetCommentListResp {
  repeated Comment comments = 1;
  int64 total = 2;
  string token = 3;
}

message UpdateCommentReq {
  string commentId = 1;
  int64 state = 2; // 1: 正常, 2: 删除
  repeated string labelIds = 3; // 标签：作者点赞，作者回复等
  string meta = 4; // 皮肤，字体等
}

message UpdateCommentResp {
}

message DeleteCommentReq {
  string commentId = 1;
}

message DeleteCommentResp {
}

message SetCommentAttrsReq {
  string commentId = 1;
  int64 attrs = 2;
  string subjectId = 3;
  int64 sortTime = 4;
}

message SetCommentAttrsResp{
}

message GetCommentSubjectReq {
  string subjectId = 1;
}

message GetCommentSubjectResp {
  string userId = 1;
  string topCommentId = 2;
  int64 rootCount = 3;
  int64 allCount = 4;
  int64 state = 5; // 1: 正常, 2: 删除
  int64 attrs = 6; // 1: 无, 2: 置顶, 3: 精华, 4: 置顶+精华
}

message CreateCommentSubjectReq {
  string subjectId = 1;
  string userId = 2;
}

message CreateCommentSubjectResp {
}

message UpdateCommentSubjectReq {
  string subjectId = 1;
  optional int64 rootCount = 2;
  optional int64 allCount = 3;
  int64 state = 4; // 1: 正常, 2: 删除
  int64 attrs = 5; // 1: 无, 2: 置顶, 3: 精华, 4: 置顶+精华
}

message UpdateCommentSubjectResp {

}

message DeleteCommentSubjectReq {
  string subjectId = 1;
  string userId = 2;
}

message DeleteCommentSubjectResp {
}

message DeleteCommentByIdsReq {
  repeated string commentIds = 1;
}

message DeleteCommentByIdsResp {
}

message CreateLabelReq {
  string fatherId = 1;
  string value = 2;
}

message CreateLabelResp {
  string labelId = 1;
}

message DeleteLabelReq {
  string labelId = 1;
}

message DeleteLabelResp {
}

message GetLabelReq {
  string labelId = 1;
}

message GetLabelResp {
  string value = 1;
}

message UpdateLabelReq {
  string labelId = 1;
  string fatherId = 2;
  string value = 3;
}

message UpdateLabelResp {
}

message GetLabelsReq {
  optional string key = 1; // 用于匹配标签的key
  optional string fatherId = 2;
  optional basic.PaginationOptions pagination = 3;
}

message GetLabelsResp {
  repeated Label labels = 1;
  int64 total = 2;
  string token = 3;
}

message GetLabelsInBatchReq {
  repeated string labelIds = 1;
}

message GetLabelsInBatchResp {
  repeated string labels = 1;
}

message CreateRelationReq{
  int64 fromType = 1;
  string fromId = 2;
  int64 toType = 3;
  string toId = 4;
  int64 relationType = 5;
  bool isOnly = 6;
}

message CreateRelationResp{
  bool ok = 1;
}

message GetRelationReq{
  int64 fromType = 1;
  string fromId = 2;
  int64 toType = 3;
  string toId = 4;
  int64 relationType = 5;
}
message GetRelationResp{
  bool ok = 1;
}

message DeleteRelationReq{
  int64 fromType = 1;
  string fromId = 2;
  int64 toType = 3;
  string toId = 4;
  int64 relationType = 5;
}
message DeleteRelationResp{
}

message FromFilterOptions{
  int64 fromType = 1;
  string fromId = 2;
  int64 toType = 3;
}
message ToFilterOptions{
  int64 toType = 1;
  string toId = 2;
  int64 fromType = 3;
}

message GetRelationsReq{
  oneof relationFilterOptions {
    FromFilterOptions fromFilterOptions = 1;
    ToFilterOptions toFilterOptions = 2;
  }
  int64 relationType = 3;
  optional basic.PaginationOptions paginationOptions = 4;
}
message GetRelationsResp{
  repeated Relation relations = 1;
  int64 total = 2;
}

message GetRelationCountReq{
  oneof relationFilterOptions {
    FromFilterOptions fromFilterOptions = 1;
    ToFilterOptions toFilterOptions = 2;
  }
  int64 relationType = 3;
}
message GetRelationCountResp{
  int64 total = 1;
}

message GetRelationPathsReq{
  string fromId = 1;
  int64 fromType = 2;
  int64 edgeType1 = 3;
  int64 edgeType2 = 4;
  optional basic.PaginationOptions paginationOptions = 5;
}

message GetRelationPathsResp{
  repeated Relation relations = 1;
}

message DeleteNodeReq{
  int64 nodeType = 1;
  string nodeId = 2;
}

message DeleteNodeResp{
}

message GetRelationPathsCountReq{
  string fromId1 = 1;
  int64 fromType1 = 2;
  int64 fromType2 = 3;
  int64 edgeType1 = 4;
  int64 edgeType2 = 5;
  int64 toType = 6;
}

message GetRelationPathsCountResp{
  int64 total = 1;
}

service PlatformService {
  rpc GetComment(GetCommentReq) returns (GetCommentResp);
  rpc GetCommentList(GetCommentListReq) returns (GetCommentListResp);
  rpc CreateComment(CreateCommentReq) returns (CreateCommentResp);
  rpc UpdateComment(UpdateCommentReq) returns (UpdateCommentResp);
  rpc DeleteComment(DeleteCommentReq) returns (DeleteCommentResp);
  rpc SetCommentAttrs(SetCommentAttrsReq) returns (SetCommentAttrsResp);
  rpc GetCommentSubject(GetCommentSubjectReq) returns (GetCommentSubjectResp);
  rpc CreateCommentSubject(CreateCommentSubjectReq) returns (CreateCommentSubjectResp);
  rpc UpdateCommentSubject(UpdateCommentSubjectReq) returns (UpdateCommentSubjectResp);
  rpc DeleteCommentSubject(DeleteCommentSubjectReq) returns (DeleteCommentSubjectResp);
  rpc DeleteCommentByIds(DeleteCommentByIdsReq) returns (DeleteCommentByIdsResp);

  rpc CreateLabel(CreateLabelReq) returns (CreateLabelResp);
  rpc DeleteLabel(DeleteLabelReq) returns (DeleteLabelResp);
  rpc GetLabel(GetLabelReq) returns (GetLabelResp);
  rpc GetLabelsInBatch(GetLabelsInBatchReq) returns(GetLabelsInBatchResp);
  rpc UpdateLabel(UpdateLabelReq) returns (UpdateLabelResp);
  rpc GetLabels(GetLabelsReq) returns (GetLabelsResp);

  rpc CreateRelation(CreateRelationReq) returns(CreateRelationResp);
  rpc GetRelations(GetRelationsReq) returns(GetRelationsResp);
  rpc GetRelationCount(GetRelationCountReq) returns(GetRelationCountResp);
  rpc DeleteRelation(DeleteRelationReq) returns(DeleteRelationResp);
  rpc GetRelation(GetRelationReq) returns(GetRelationResp);
  rpc GetRelationPaths(GetRelationPathsReq) returns(GetRelationPathsResp);
  rpc DeleteNode(DeleteNodeReq) returns(DeleteNodeResp);
  rpc GetRelationPathsCount(GetRelationPathsCountReq) returns(GetRelationPathsCountResp);
}
